# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta_variance), Y = beta_variance)) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
library(tidyverse)
library(invgamma)
library(MASS)
library(Rcpp)
library(horseshoe)
library(tictoc)
library(Mhorseshoe)
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta_variance), Y = beta_variance)) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta_variance), Y = beta_variance[, i])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta_variance[, i]),max(beta_variance[, i]))))
}
fit_Mhorseshoe1 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000,
s = 0.01, xi = 1, sigma = 1,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
fit_Mhorseshoe1 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000,
s = 0.01, xi = 1, sigma = 1,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
fit_Mhorseshoe1 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000,
s = 0.01, xi = 1, sigma = 1,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
fit_Mhorseshoe1 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 3000,
s = 0.01, xi = 1, sigma = 1,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
saveRDS(fit_Mhorseshoe1, file = "chain1.RDS")
fit_Mhorseshoe2 <- Mhorseshoe::approximate_algorithm(standardized_W, z, iteration = 3000,
s = 0.01, xi = 1, sigma = 1, w = 0,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
saveRDS(fit_Mhorseshoe2, file = "chain2.RDS")
fit_Mhorseshoe3 <- Mhorseshoe::approximate_algorithm(standardized_W, z, iteration = 3000,
s = 0.01, xi = 1, sigma = 1, w = 0,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
saveRDS(fit_Mhorseshoe3, file = "chain3.RDS")
fit_Mhorseshoe4 <- Mhorseshoe::approximate_algorithm(standardized_W, z, iteration = 3000,
s = 0.01, xi = 1, sigma = 1, w = 0,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
fit_Mhorseshoe4 <- Mhorseshoe::approximate_algorithm(standardized_W, z, iteration = 3000,
s = 0.01, xi = 1, sigma = 1, w = 0,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
saveRDS(fit_Mhorseshoe4, file = "chain4.RDS")
fit_Mhorseshoe5 <- Mhorseshoe::approximate_algorithm(standardized_W, z, iteration = 3000,
s = 0.01, xi = 1, sigma = 1, w = 0,
time_check = FALSE,
iteration_check = TRUE,
step_check = FALSE)
saveRDS(fit_Mhorseshoe5, file = "chain5.RDS")
library(Bolstad2)
beta_variance1 <- data.frame(b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0)
for (i in 1:length(fit_Mhorseshoe1[[5]])) {
beta_variance1 <- rbind(beta_variance1,
diag(fit_Mhorseshoe1[[5]][[i]])[non_zero_index])
}
beta_variance2 <- data.frame(b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0)
for (i in 1:length(fit_Mhorseshoe2[[5]])) {
beta_variance2 <- rbind(beta_variance2,
diag(fit_Mhorseshoe2[[5]][[i]])[non_zero_index])
}
beta_variance3 <- data.frame(b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0)
for (i in 1:length(fit_Mhorseshoe3[[5]])) {
beta_variance3 <- rbind(beta_variance3,
diag(fit_Mhorseshoe3[[5]][[i]])[non_zero_index])
}
beta_variance4 <- data.frame(b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0)
for (i in 1:length(fit_Mhorseshoe4[[5]])) {
beta_variance4 <- rbind(beta_variance4,
diag(fit_Mhorseshoe4[[5]][[i]])[non_zero_index])
}
beta_variance5 <- data.frame(b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0)
for (i in 1:length(fit_Mhorseshoe5[[5]])) {
beta_variance5 <- rbind(beta_variance5,
diag(fit_Mhorseshoe5[[5]][[i]])[non_zero_index])
}
Bolstad2::GelmanRubin(theta = cbind(beta_variance1$b1[1502:3001],
beta_variance2$b1[1502:3001],
beta_variance3$b1[1502:3001],
beta_variance4$b1[1502:3001],
beta_variance5$b1[1502:3001]))
Bolstad2::GelmanRubin(theta = cbind(beta_variance1$b5[1502:3001],
beta_variance2$b5[1502:3001],
beta_variance3$b5[1502:3001],
beta_variance4$b5[1502:3001],
beta_variance5$b5[1502:3001]))
Bolstad2::GelmanRubin(theta = cbind(beta_variance1$b4[1502:3001],
beta_variance2$b4[1502:3001],
beta_variance3$b4[1502:3001],
beta_variance4$b4[1502:3001],
beta_variance5$b4[1502:3001]))
Bolstad2::GelmanRubin(theta = cbind(beta_variance1$b3[1502:3001],
beta_variance2$b3[1502:3001],
beta_variance3$b3[1502:3001],
beta_variance4$b3[1502:3001],
beta_variance5$b3[1502:3001]))
Bolstad2::GelmanRubin(theta = cbind(beta_variance1$b2[1502:3001],
beta_variance2$b2[1502:3001],
beta_variance3$b2[1502:3001],
beta_variance4$b2[1502:3001],
beta_variance5$b2[1502:3001]))
Bolstad2::GelmanRubin(theta = cbind(beta_variance1$b1[1502:3001],
beta_variance2$b1[1502:3001],
beta_variance3$b1[1502:3001],
beta_variance4$b1[1502:3001],
beta_variance5$b1[1502:3001]))
chain1_beta1 <- fit_Mhorseshoe1[[1]][(burn+1):num_per_chain, non_zero_index]
length(fit_Mhorseshoe1[[1]])
nrow(fit_Mhorseshoe1[[1]])
chain1_beta1 <- fit_Mhorseshoe1[[1]][1502:3001, non_zero_index]
chain2_beta2 <- fit_Mhorseshoe2[[1]][1502:3001, non_zero_index]
chain3_beta3 <- fit_Mhorseshoe3[[1]][1502:3001, non_zero_index]
chain4_beta4 <- fit_Mhorseshoe4[[1]][1502:3001, non_zero_index]
chain5_beta5 <- fit_Mhorseshoe5[[1]][1502:3001, non_zero_index]
View(chain1_beta1)
# Gelman-Rubin statistic using package
Bolstad2::GelmanRubin(theta = cbind(chain1_global,
chain2_global,
chain3_global,
chain4_global,
chain5_global))
rm(chain1_beta1, chain2_beta2, chain3_beta3, chain4_beta4, chain5_beta5)
chain1_beta <- fit_Mhorseshoe1[[1]][1502:3001, non_zero_index]
chain2_beta <- fit_Mhorseshoe2[[1]][1502:3001, non_zero_index]
chain3_beta <- fit_Mhorseshoe3[[1]][1502:3001, non_zero_index]
chain4_beta <- fit_Mhorseshoe4[[1]][1502:3001, non_zero_index]
chain5_beta <- fit_Mhorseshoe5[[1]][1502:3001, non_zero_index]
View(chain5_beta)
# Gelman-Rubin statistic using package
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 1],
chain2_beta[, 1],
chain3_beta[, 1],
chain4_beta[, 1],
chain5_beta[, 1]))
# Gelman-Rubin statistic using package
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 1],
chain2_beta[, 1],
chain3_beta[, 1],
chain4_beta[, 1],
chain5_beta[, 1]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 2],
chain2_beta[, 2],
chain3_beta[, 2],
chain4_beta[, 2],
chain5_beta[, 2]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 3],
chain2_beta[, 3],
chain3_beta[, 3],
chain4_beta[, 3],
chain5_beta[, 3]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 4],
chain2_beta[, 4],
chain3_beta[, 4],
chain4_beta[, 4],
chain5_beta[, 4]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 5],
chain2_beta[, 5],
chain3_beta[, 5],
chain4_beta[, 5],
chain5_beta[, 5]))
knitr::opts_chunk$set(echo = TRUE)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M2 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M3 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M4 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M5 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
knitr::opts_chunk$set(echo = TRUE)
fit_M1$beta_variance[[1]]
dim(fit_M1$beta_variance[[1]])
fit_M1$beta_variance[[1]] %>% View()
fit_M1$beta_variance %>% View()
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M2 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M3 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
knitr::opts_chunk$set(echo = TRUE)
fit_M3 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M4 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M5 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
dim(fit_M1$beta_variance[[1]])
dim(fit_M1$beta_variance[[2]])
dim(fit_M1$beta_variance[[3]])
fit_M1$beta_variance[[3]]
diag(fit_M1$beta_variance[[3]])
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M2 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M3 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M4 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
fit_M5 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 3000,
threshold = p)
knitr::opts_chunk$set(echo = TRUE)
fit_M1$active_index[[1]]
fit_M1$active_index[[2]]
fit_M1$active_index[[3]]
fit_M1$active_index[[4]]
fit_M1$active_index[[5]]
fit_M1$active_index[[6]]
fit_M1$active_index[[7]]
fit_M1$active_index[[10]]
fit_M1$active_index[[50]]
fit_M1$active_index[[100]]
fit_M1$beta_variance[[100]]
diag(fit_M1$beta_variance[[100]])
fit_M1$active_index[[100]]
diag(fit_M1$beta_variance[[100]])
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 5,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M2 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M3 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M4 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M5 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 5,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
z[0]
library(Mhorseshoe)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
knitr::opts_chunk$set(echo = TRUE)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p,
true_index = non_zero_index)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p,
true_index = non_zero_index)
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p,
true_index = non_zero_index)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
library(Bolstad2)
fit_Mhorseshoe1 <- readRDS(file = "chain1.RDS")
fit_Mhorseshoe2 <- readRDS(file = "chain2.RDS")
fit_Mhorseshoe3 <- readRDS(file = "chain3.RDS")
fit_Mhorseshoe4 <- readRDS(file = "chain4.RDS")
fit_Mhorseshoe5 <- readRDS(file = "chain5.RDS")
chain1_beta <- fit_Mhorseshoe1[[1]][1502:3001, non_zero_index]
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 5,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
fit_M1 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M2 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M3 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M4 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
fit_M5 <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000,
threshold = p)
chain1_beta <- fit_M1[[1]][2501:5000, non_zero_index]
chain2_beta <- fit_M2[[1]][2501:5000, non_zero_index]
chain3_beta <- fit_M3[[1]][2501:5000, non_zero_index]
chain4_beta <- fit_M4[[1]][2501:5000, non_zero_index]
chain5_beta <- fit_M5[[1]][2501:5000, non_zero_index]
# Gelman-Rubin statistic using package
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 1],
chain2_beta[, 1],
chain3_beta[, 1],
chain4_beta[, 1],
chain5_beta[, 1]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 2],
chain2_beta[, 2],
chain3_beta[, 2],
chain4_beta[, 2],
chain5_beta[, 2]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 3],
chain2_beta[, 3],
chain3_beta[, 3],
chain4_beta[, 3],
chain5_beta[, 3]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 4],
chain2_beta[, 4],
chain3_beta[, 4],
chain4_beta[, 4],
chain5_beta[, 4]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 5],
chain2_beta[, 5],
chain3_beta[, 5],
chain4_beta[, 5],
chain5_beta[, 5]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 6],
chain2_beta[, 6],
chain3_beta[, 6],
chain4_beta[, 6],
chain5_beta[, 6]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 7],
chain2_beta[, 7],
chain3_beta[, 7],
chain4_beta[, 7],
chain5_beta[, 7]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 8],
chain2_beta[, 8],
chain3_beta[, 8],
chain4_beta[, 8],
chain5_beta[, 8]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 9],
chain2_beta[, 9],
chain3_beta[, 9],
chain4_beta[, 9],
chain5_beta[, 9]))
Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, 10],
chain2_beta[, 10],
chain3_beta[, 10],
chain4_beta[, 10],
chain5_beta[, 10]))
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_modified <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 10000,
threshold = p)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(invgamma)
library(MASS)
library(Rcpp)
library(horseshoe)
library(tictoc)
library(Mhorseshoe)
tic()
fit_modified <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 10000,
threshold = p)
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_modified <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 10000,
threshold = p)
toc()
?horseshoe
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "halfCauchy",
method.sigma = "jeffreys", nmc = 10000)
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "halfCauchy",
method.sigma = "Jeffreys", nmc = 10000)
toc()
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "fixed", tau = 200000,
method.sigma = "Jeffreys", burn = 1000, nmc = 9000)
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "fixed", tau = 200000,
method.sigma = "Jeffreys", burn = 1000, nmc = 9000)
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "fixed", tau = 200000,
method.sigma = "Jeffreys", burn = 1000, nmc = 9000)
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "fixed", tau = 20000,
method.sigma = "Jeffreys", burn = 1000, nmc = 9000)
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "fixed", tau = 2000,
method.sigma = "Jeffreys", burn = 1000, nmc = 9000)
tic()
fit_horsehsoe <- horseshoe(z, standardized_W, method.tau = "fixed", tau = 1000,
method.sigma = "Jeffreys", burn = 1000, nmc = 9000)
