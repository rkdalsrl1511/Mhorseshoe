k = 0,
iteration = 5000)
toc()
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 10,
iteration = 5000)
toc()
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
toc()
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
data.frame(fit_Mamcmc$active_set, fit_Mamcmc$meff) %>% View()
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 20,
SD = 0.1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
toc()
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
# 시뮬레이션 데이터 생성
N <- 300
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 30,
SD = 0.1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
toc()
library(Mhorseshoe)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
toc()
knitr::opts_chunk$set(echo = TRUE)
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 30,
SD = 0.1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
toc()
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
toc()
tic()
fit_horsehsoe <- horseshoe(z, standardized_W,
method.tau = "halfCauchy",
method.sigma = "Jeffreys",
burn = 0, nmc = 3000)
toc()
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])))
}
# 시뮬레이션 데이터 생성
N <- 300
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 30,
SD = 0.1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
toc()
library(Mhorseshoe)
library(Mhorseshoe)
library(Mhorseshoe)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
# 시뮬레이션 데이터 생성
N <- 300
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 30,
SD = 0.1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
library(tidyverse)
library(invgamma)
library(MASS)
library(Rcpp)
library(horseshoe)
library(tictoc)
library(Mhorseshoe)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
k = 0,
iteration = 5000)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
# 각각의 L2 norm loss 구하기
beta1 <- fit_Mamcmc$beta
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
# 시뮬레이션 데이터 생성
N <- 300
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 30,
SD = 1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
beta3 <- fit_amcmc$beta
beta <- fit_amcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
# 시뮬레이션 데이터 생성
N <- 300
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 40,
SD = 1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
beta <- fit_amcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
# 시뮬레이션 데이터 생성
N <- 300
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 50,
SD = 1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
beta <- fit_amcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
# 시뮬레이션 데이터 생성
N <- 300
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 60,
SD = 1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
beta <- fit_amcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 30,
SD = 1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
beta <- fit_amcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 40,
SD = 1, fixed_coefficients = 1)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 40,
SD = 1, fixed_coefficients = 10)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 5000)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000)
library(Mhorseshoe)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000)
toc()
knitr::opts_chunk$set(echo = TRUE)
# 각각의 L2 norm loss 구하기
beta1 <- fit_Mamcmc$beta
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
beta <- fit_amcmc$beta
tic()
fit_horsehsoe <- horseshoe(z, standardized_W,
method.tau = "halfCauchy",
method.sigma = "Jeffreys",
burn = 2500, nmc = 2500)
toc()
beta <- fit_horsehsoe$BetaSamples
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])))
}
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
toc()
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 5000)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 10000)
toc()
tic()
fit_horsehsoe <- horseshoe(z, standardized_W,
method.tau = "halfCauchy",
method.sigma = "Jeffreys",
burn = 5000, nmc = 5000)
toc()
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
beta <- fit_horsehsoe$BetaSamples
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])))
}
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 10000)
toc()
# 각각의 L2 norm loss 구하기
beta1 <- fit_Mamcmc$beta
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
beta <- fit_amcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
beta <- fit_Mamcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
beta <- fit_horsehsoe$BetaSamples
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])))
}
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])) +
coord_cartesian(ylim = c(0,30)))
}
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])) +
coord_cartesian(ylim = c(0,20)))
}
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])) +
coord_cartesian(ylim = c(5,15)))
}
# horseshoe
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:ncol(beta), Y = beta[non_zero_index[i], ])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[i]),
y = "value", title = str_c("true value = ", non_zero_coefficents[i])) +
coord_cartesian(ylim = c(7.5,12.5)))
}
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
# 각각의 L2 norm loss 구하기
beta1 <- fit_Mamcmc$beta
beta2 <- fit_horsehsoe$BetaSamples
beta3 <- fit_amcmc$beta
nonzero_horseshoe <- beta2[non_zero_index, ]
nonzero_approximate <- beta3[, non_zero_index]
nonzero_modified <- beta1[, non_zero_index]
nonzero_horseshoe <- t(beta2[non_zero_index, ])
View(nonzero_horseshoe)
nonzero_approximate <- beta3[5001:10000, non_zero_index]
nonzero_modified <- beta1[5001:10000, non_zero_index]
horseshoe_mean <- apply(nonzero_horseshoe, mean)
horseshoe_mean <- apply(nonzero_horseshoe, mean())
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 1, mean())
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 1, mean(x))
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 1, FUN = mean(x))
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 1, FUN = function(x) mean(x))
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 2, FUN = function(x) mean(x))
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 2, FUN = function(x) mean(x))
approximate_mean <- apply(nonzero_horseshoe, MARGIN = 2, FUN = function(x) mean(x))
Mapproximate_mean <- apply(nonzero_horseshoe, MARGIN = 2, FUN = function(x) mean(x))
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 2, FUN = function(x) mean(x))
approximate_mean <- apply(nonzero_approximate, MARGIN = 2, FUN = function(x) mean(x))
Mapproximate_mean <- apply(nonzero_modified, MARGIN = 2, FUN = function(x) mean(x))
nonzero_horseshoe <- t(beta2[non_zero_index, ])
nonzero_approximate <- beta3[5001:10000, non_zero_index]
nonzero_modified <- beta1[5001:10000, non_zero_index]
horseshoe_mean <- apply(nonzero_horseshoe, MARGIN = 2, FUN = function(x) mean(x))
approximate_mean <- apply(nonzero_approximate, MARGIN = 2, FUN = function(x) mean(x))
Mapproximate_mean <- apply(nonzero_modified, MARGIN = 2, FUN = function(x) mean(x))
nonzero_l2_horseshoe <- sqrt(sum((horseshoe_mean - non_zero_coefficents)^2))
nonzero_l2_horseshoe <- sqrt(sum((horseshoe_mean - non_zero_coefficents)^2))
nonzero_l2_approximate <- sqrt(sum((approximate_mean - non_zero_coefficents)^2))
nonzero_l2_Mapproximate <- sqrt(sum((Mapproximate_mean - non_zero_coefficents)^2))
zero_horseshoe <- t(beta2[-non_zero_index, ])
zero_approximate <- beta3[5001:10000, -non_zero_index]
zero_modified <- beta1[5001:10000, -non_zero_index]
horseshoe_zero_mean <- apply(zero_horseshoe, MARGIN = 2,
FUN = function(x) mean(x))
approximate_zero_mean <- apply(zero_approximate, MARGIN = 2,
FUN = function(x) mean(x))
Mapproximate_zero_mean <- apply(zero_modified, MARGIN = 2,
FUN = function(x) mean(x))
zero_l2_horseshoe <- sqrt(sum((horseshoe_zero_mean)^2))
zero_l2_approximate <- sqrt(sum((approximate_zero_mean)^2))
zero_l2_Mapproximate <- sqrt(sum((Mapproximate_zero_mean)^2))
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
# 시뮬레이션 데이터 생성
N <- 500
p <- 3000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 20,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
toc()
beta <- fit_amcmc$beta
# beta trace plot 확인
for (i in 1:length(non_zero_index)) {
print(ggplot(data = data.frame(X = 1:nrow(beta), Y = beta[, non_zero_index[i]])) + geom_line(mapping = aes(x = X, y = Y)) + labs(x = str_c("beta ", non_zero_index[i]), y = "value", title = str_c("true value = ", non_zero_coefficents[i])) + coord_cartesian(ylim = c(min(beta[, non_zero_index[i]]),max(beta[, non_zero_index[i]]))))
}
