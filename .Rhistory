# Estimation results of the horseshoe.
ggplot(data = df, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = horseshoe_leftCI,
ymax = horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the horseshoe function", y = "beta")
# approx_horseshoe.
approx_horseshoe_result <- approx_horseshoe(X, y, iteration = 5000)
approx_horseshoe_postmean <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
approx_horseshoe_leftCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
approx_horseshoe_rightCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
# mapprox_horseshoe.
mapprox_horseshoe_result <- mapprox_horseshoe(X, y, iteration = 5000)
mapprox_horseshoe_postmean <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
mapprox_horseshoe_leftCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
mapprox_horseshoe_rightCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
df2 <- data.frame(index = 1:100,
approx_horseshoe_postmean = approx_horseshoe_postmean[1:100],
approx_horseshoe_leftCI = approx_horseshoe_leftCI[1:100],
approx_horseshoe_rightCI = approx_horseshoe_rightCI[1:100],
mapprox_horseshoe_postmean = mapprox_horseshoe_postmean[1:100],
mapprox_horseshoe_leftCI = mapprox_horseshoe_leftCI[1:100],
mapprox_horseshoe_rightCI = mapprox_horseshoe_rightCI[1:100],
true_beta = true_beta[1:100])
# Estimation results of the approx_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = approx_horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = approx_horseshoe_leftCI,
ymax = approx_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the approx_horseshoe", y = "beta")
# Estimation results of the mapprox_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = mapprox_horseshoe_postmean),
size = 2, col = "red") +
geom_errorbar(aes(ymin = mapprox_horseshoe_leftCI,
ymax = mapprox_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the mapprox_horseshoe", y = "beta")
exact_horseshoe_activeset <- rep(p, 5000)
approx_horseshoe_activeset <- approx_horseshoe_result$ActiveSamples
mapprox_horseshoe_activeset <- mapprox_horseshoe_result$ActiveSamples
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# making simulation data.
set.seed(123)
N <- 100
p <- 500
true_beta <- c(rep(1, 30), rep(0, 470))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:10) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
# approx_horseshoe.
approx_horseshoe_result <- approx_horseshoe(X, y, iteration = 5000)
# approx_horseshoe.
approx_horseshoe_result <- approx_horseshoe(X, y, iteration = 5000)
# making simulation data.
set.seed(123)
N <- 200
p <- 500
true_beta <- c(rep(1, 30), rep(0, 470))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:10) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
# approx_horseshoe.
approx_horseshoe_result <- approx_horseshoe(X, y, iteration = 5000)
approx_horseshoe_postmean <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
approx_horseshoe_leftCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
approx_horseshoe_rightCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
# mapprox_horseshoe.
mapprox_horseshoe_result <- mapprox_horseshoe(X, y, iteration = 5000)
mapprox_horseshoe_postmean <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
mapprox_horseshoe_leftCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
mapprox_horseshoe_rightCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
df2 <- data.frame(index = 1:100,
approx_horseshoe_postmean = approx_horseshoe_postmean[1:100],
approx_horseshoe_leftCI = approx_horseshoe_leftCI[1:100],
approx_horseshoe_rightCI = approx_horseshoe_rightCI[1:100],
mapprox_horseshoe_postmean = mapprox_horseshoe_postmean[1:100],
mapprox_horseshoe_leftCI = mapprox_horseshoe_leftCI[1:100],
mapprox_horseshoe_rightCI = mapprox_horseshoe_rightCI[1:100],
true_beta = true_beta[1:100])
# Estimation results of the approx_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = approx_horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = approx_horseshoe_leftCI,
ymax = approx_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the approx_horseshoe", y = "beta")
# Estimation results of the mapprox_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = mapprox_horseshoe_postmean),
size = 2, col = "red") +
geom_errorbar(aes(ymin = mapprox_horseshoe_leftCI,
ymax = mapprox_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the mapprox_horseshoe", y = "beta")
exact_horseshoe_activeset <- rep(p, 5000)
approx_horseshoe_activeset <- approx_horseshoe_result$ActiveSamples
mapprox_horseshoe_activeset <- mapprox_horseshoe_result$ActiveSamples
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# making simulation data.
set.seed(123)
N <- 300
p <- 500
true_beta <- c(rep(1, 30), rep(0, 470))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:10) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
# making simulation data.
set.seed(123)
N <- 300
p <- 500
true_beta <- c(rep(1, 30), rep(0, 470))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:30) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
# making simulation data.
set.seed(123)
N <- 300
p <- 500
p_star <- 30
true_beta <- c(rep(1, p_star), rep(0, p-p_star))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:p_star) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
# approx_horseshoe.
approx_horseshoe_result <- approx_horseshoe(X, y, iteration = 5000)
approx_horseshoe_postmean <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
approx_horseshoe_leftCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
approx_horseshoe_rightCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
# mapprox_horseshoe.
mapprox_horseshoe_result <- mapprox_horseshoe(X, y, iteration = 5000)
mapprox_horseshoe_postmean <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
mapprox_horseshoe_leftCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
mapprox_horseshoe_rightCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
df2 <- data.frame(index = 1:100,
approx_horseshoe_postmean = approx_horseshoe_postmean[1:100],
approx_horseshoe_leftCI = approx_horseshoe_leftCI[1:100],
approx_horseshoe_rightCI = approx_horseshoe_rightCI[1:100],
mapprox_horseshoe_postmean = mapprox_horseshoe_postmean[1:100],
mapprox_horseshoe_leftCI = mapprox_horseshoe_leftCI[1:100],
mapprox_horseshoe_rightCI = mapprox_horseshoe_rightCI[1:100],
true_beta = true_beta[1:100])
# Estimation results of the approx_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = approx_horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = approx_horseshoe_leftCI,
ymax = approx_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the approx_horseshoe", y = "beta")
# Estimation results of the mapprox_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = mapprox_horseshoe_postmean),
size = 2, col = "red") +
geom_errorbar(aes(ymin = mapprox_horseshoe_leftCI,
ymax = mapprox_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the mapprox_horseshoe", y = "beta")
exact_horseshoe_activeset <- rep(p, 5000)
approx_horseshoe_activeset <- approx_horseshoe_result$ActiveSamples
mapprox_horseshoe_activeset <- mapprox_horseshoe_result$ActiveSamples
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# making simulation data.
set.seed(123)
N <- 300
p <- 500
p_star <- 50
true_beta <- c(rep(1, p_star), rep(0, p-p_star))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:p_star) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
# approx_horseshoe.
approx_horseshoe_result <- approx_horseshoe(X, y, iteration = 5000)
approx_horseshoe_postmean <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
approx_horseshoe_leftCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
approx_horseshoe_rightCI <- apply(approx_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
# mapprox_horseshoe.
mapprox_horseshoe_result <- mapprox_horseshoe(X, y, iteration = 5000)
mapprox_horseshoe_postmean <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, mean)
mapprox_horseshoe_leftCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.025)
mapprox_horseshoe_rightCI <- apply(mapprox_horseshoe_result$BetaSamples[1001:5000, ],
MARGIN = 2, quantile, probs = 0.975)
df2 <- data.frame(index = 1:100,
approx_horseshoe_postmean = approx_horseshoe_postmean[1:100],
approx_horseshoe_leftCI = approx_horseshoe_leftCI[1:100],
approx_horseshoe_rightCI = approx_horseshoe_rightCI[1:100],
mapprox_horseshoe_postmean = mapprox_horseshoe_postmean[1:100],
mapprox_horseshoe_leftCI = mapprox_horseshoe_leftCI[1:100],
mapprox_horseshoe_rightCI = mapprox_horseshoe_rightCI[1:100],
true_beta = true_beta[1:100])
# Estimation results of the approx_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = approx_horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = approx_horseshoe_leftCI,
ymax = approx_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the approx_horseshoe", y = "beta")
# Estimation results of the mapprox_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = mapprox_horseshoe_postmean),
size = 2, col = "red") +
geom_errorbar(aes(ymin = mapprox_horseshoe_leftCI,
ymax = mapprox_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the mapprox_horseshoe", y = "beta")
exact_horseshoe_activeset <- rep(p, 5000)
approx_horseshoe_activeset <- approx_horseshoe_result$ActiveSamples
mapprox_horseshoe_activeset <- mapprox_horseshoe_result$ActiveSamples
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
width = 0.1, alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
width = 0.2, alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
width = 0.5, alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
width = 1, alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
# active set plot
ggplot(data = data.frame(X = 1:5000,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
alpha = 0.5) +
scale_color_manual(values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox")) +
labs(x = "iteration", y = "length(S)")
package?Mhorseshoe
# Estimation results of the approx_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = approx_horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = approx_horseshoe_leftCI,
ymax = approx_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the approx_horseshoe", y = "beta")
# Estimation results of the mapprox_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = mapprox_horseshoe_postmean),
size = 2, col = "red") +
geom_errorbar(aes(ymin = mapprox_horseshoe_leftCI,
ymax = mapprox_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the mapprox_horseshoe", y = "beta")
library(Mhorseshoe)
library(tidyverse)
library(webp)
# webp 폴더들을 입력받아서 각각을 jpg 파일로 처리하여 저장
folder_path <- "C:/Users/rkdal/OneDrive/바탕 화면/새 폴더"
webp_folder_dir <- list.dirs(path = folder_path)[-1]
remove_webp <- TRUE
# 본문
for (i in 1:length(webp_folder_dir)) {
# 폴더의 파일 리스트 추출
file_list <- list.files(path = webp_folder_dir[i])
# 확장자를 제외한 문자만 추출
webp_name <- str_extract(list.files(path = webp_folder_dir[i]),
pattern = ".+\\.")
# webp 파일을 불러오고, jpeg 확장자로 저장
for (j in 1:length(webp_name)) {
webp_img <- webp::read_webp(source = paste0(webp_folder_dir[i], "/", file_list[j]))
webp::write_webp(webp_img, paste0(webp_folder_dir[i], "/", webp_name[j], "jpeg"))
}
# 기존 webp 파일 삭제 옵션
if(remove_webp){
file.remove(paste0(webp_folder_dir[i], "/", file_list))
}
}
# webp 폴더들을 입력받아서 각각을 jpg 파일로 처리하여 저장
folder_path <- "C:/Users/rkdal/OneDrive/바탕 화면/새 폴더"
webp_folder_dir <- list.dirs(path = folder_path)[-1]
remove_webp <- TRUE
# 본문
for (i in 1:length(webp_folder_dir)) {
# 폴더의 파일 리스트 추출
file_list <- list.files(path = webp_folder_dir[i])
# 확장자를 제외한 문자만 추출
webp_name <- str_extract(list.files(path = webp_folder_dir[i]),
pattern = ".+\\.")
# webp 파일을 불러오고, jpeg 확장자로 저장
for (j in 1:length(webp_name)) {
webp_img <- webp::read_webp(source = paste0(webp_folder_dir[i], "/", file_list[j]))
webp::write_webp(webp_img, paste0(webp_folder_dir[i], "/", webp_name[j], "jpeg"))
}
# 기존 webp 파일 삭제 옵션
if(remove_webp){
file.remove(paste0(webp_folder_dir[i], "/", file_list))
}
}
# webp 폴더들을 입력받아서 각각을 jpg 파일로 처리하여 저장
folder_path <- "C:/Users/rkdal/OneDrive/바탕 화면/새 폴더"
webp_folder_dir <- list.dirs(path = folder_path)[-1]
remove_webp <- TRUE
# 본문
for (i in 1:length(webp_folder_dir)) {
# 폴더의 파일 리스트 추출
file_list <- list.files(path = webp_folder_dir[i])
# 확장자를 제외한 문자만 추출
webp_name <- str_extract(list.files(path = webp_folder_dir[i]),
pattern = ".+\\.")
# webp 파일을 불러오고, jpeg 확장자로 저장
for (j in 1:length(webp_name)) {
webp_img <- webp::read_webp(source = paste0(webp_folder_dir[i], "/", file_list[j]))
webp::write_webp(webp_img, paste0(webp_folder_dir[i], "/", webp_name[j], "jpeg"))
}
# 기존 webp 파일 삭제 옵션
if(remove_webp){
file.remove(paste0(webp_folder_dir[i], "/", file_list))
}
}
# webp 폴더들을 입력받아서 각각을 jpg 파일로 처리하여 저장
folder_path <- "C:/Users/rkdal/OneDrive/바탕 화면/새 폴더"
webp_folder_dir <- list.dirs(path = folder_path)[-1]
remove_webp <- TRUE
# 본문
for (i in 1:length(webp_folder_dir)) {
# 폴더의 파일 리스트 추출
file_list <- list.files(path = webp_folder_dir[i])
# 확장자를 제외한 문자만 추출
webp_name <- str_extract(list.files(path = webp_folder_dir[i]),
pattern = ".+\\.")
# webp 파일을 불러오고, jpeg 확장자로 저장
for (j in 1:length(webp_name)) {
webp_img <- webp::read_webp(source = paste0(webp_folder_dir[i], "/", file_list[j]))
webp::write_webp(webp_img, paste0(webp_folder_dir[i], "/", webp_name[j], "jpeg"))
}
# 기존 webp 파일 삭제 옵션
if(remove_webp){
file.remove(paste0(webp_folder_dir[i], "/", file_list))
}
}
