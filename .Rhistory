modified_active_set = fixed_m3000_spend_time$`number of active set columns`[101:nrow(fixed_m3000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
fit_sampling_approximate_1000 <- readRDS(file = "sampling_approximate_1000.rds")
fit_sampling_approximate_2000 <- readRDS(file = "sampling_approximate_2000.rds")
fit_sampling_approximate_3000 <- readRDS(file = "sampling_approximate_3000.rds")
fit_sampling_modified_1000 <- readRDS(file = "sampling_modified_1000.rds")
fit_sampling_modified_2000 <- readRDS(file = "sampling_modified_2000.rds")
fit_sampling_modified_3000 <- readRDS(file = "sampling_modified_3000.rds")
# approximate algorithm
sampling_a1000_beta <- fit_sampling_approximate_1000$beta
sampling_a1000_spend_time <- fit_sampling_approximate_1000$spend_time
sampling_a2000_beta <- fit_sampling_approximate_2000$beta
sampling_a2000_spend_time <- fit_sampling_approximate_2000$spend_time
sampling_a3000_beta <- fit_sampling_approximate_3000$beta
sampling_a3000_spend_time <- fit_sampling_approximate_3000$spend_time
# modified algorithm
sampling_m1000_beta <- fit_sampling_modified_1000$beta
sampling_m1000_spend_time <- fit_sampling_modified_1000$spand_time
sampling_m2000_beta <- fit_sampling_modified_2000$beta
sampling_m2000_spend_time <- fit_sampling_modified_2000$spand_time
sampling_m3000_beta <- fit_sampling_modified_3000$beta
sampling_m3000_spend_time <- fit_sampling_modified_3000$spand_time
# 1000
ggplot(data = data.frame(X = 101:nrow(sampling_a1000_spend_time),
approximate_active_set = sampling_a1000_spend_time$total_active_column[101:nrow(sampling_a1000_spend_time)],
modified_active_set = sampling_m1000_spend_time$`number of active set columns`[101:nrow(sampling_m1000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 2000
ggplot(data = data.frame(X = 101:nrow(sampling_a2000_spend_time),
approximate_active_set = sampling_a2000_spend_time$total_active_column[101:nrow(sampling_a2000_spend_time)],
modified_active_set = sampling_m2000_spend_time$`number of active set columns`[101:nrow(sampling_m2000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 3000
ggplot(data = data.frame(X = 101:nrow(sampling_a3000_spend_time),
approximate_active_set = sampling_a3000_spend_time$total_active_column[101:nrow(sampling_a3000_spend_time)],
modified_active_set = sampling_m3000_spend_time$`number of active set columns`[101:nrow(sampling_m3000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
response_list4 <- readRDS(file = "./simulation4_data.rds")
W4 <- response_list4[[1]]
z4 <- response_list4[[2]]
non_zero_index4 <- response_list4[[3]]
non_zero_coefficents4 <- response_list4[[4]]
fit_simulation4_modified <- readRDS(file = "./simulation4_modified.rds")
simulation4_beta <- fit_simulation4_modified$beta
simulation4_spend_time <- fit_simulation4_modified$spand_time
fit_simulation4_approximate <- readRDS(file = "./simulation4_approximate.rds")
simulation4_beta2 <- fit_simulation4_approximate$beta
simulation4_spend_time2 <- fit_simulation4_approximate$spend_time
# active_set graph
ggplot(data = data.frame(X = 101:nrow(simulation4_spend_time),
approximate_active_set = simulation4_spend_time2$total_active_column[101:nrow(simulation4_spend_time)],
modified_active_set = simulation4_spend_time$`number of active set columns`[101:nrow(simulation4_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# sigma graph
simulation4_sigma <- fit_simulation4_modified$sigma2
simulation4_sigma2 <- fit_simulation4_approximate$sigma_parameter
ggplot(data = data.frame(X = 501:length(simulation4_sigma),
modified_sigma = simulation4_sigma[501:length(simulation4_sigma)],
approximate_sigma = simulation4_sigma2[501:length(simulation4_sigma)])) +
geom_line(mapping = aes(x = X, y = modified_sigma, color = "red")) +
geom_line(mapping = aes(x = X, y = approximate_sigma, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("modified_sigma", "approximate_sigma"))
# spend_time_per_iteration graph
ggplot(data = data.frame(X = 1:length(simulation4_spend_time$total_time),
modified_time = simulation4_spend_time$total_time,
approximate_time = simulation4_spend_time2$total_time)) +
geom_line(mapping = aes(x = X, y = modified_time, color = "red", alpha = 0.5)) +
geom_line(mapping = aes(x = X, y = approximate_time, color = "blue", alpha = 0.5)) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("modified_time_per_iteration",
"approximate_time_per_iteration"))
# xi graph
simulation4_log_xi <- log(fit_simulation4_modified$global_shrinkage_parameter)
simulation4_log_xi2 <- log(fit_simulation4_approximate$global_shrinkage_parameter)
ggplot(data = data.frame(X = 1:length(simulation4_log_xi),
modified_log_xi = simulation4_log_xi[1:length(simulation4_log_xi)],
approximate_log_xi = simulation4_log_xi2[1:length(simulation4_log_xi2)])) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "red")) +
geom_line(mapping = aes(x = X, y = approximate_log_xi, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("modified_log_xi",
"approximate_log_xi"))
# fix와 sampling의 local shrinkage parameter 비교
fixed_local_a3000 <- fit_fixed_approximate_3000$local_shrinkage_parameter
# fix와 sampling의 local shrinkage parameter 비교
fixed_local_a3000 <- fit_fixed_approximate_3000$local_shrinkage_parameter
sampling_local_a3000 <- fit_sampling_approximate_3000$local_shrinkage_parameter
q <- ggplot(data = data.frame(X = 1:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[, non_zero_index3[i]],
sampling = sampling_local_a3000[, non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed))
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[, non_zero_index3[i]],
sampling = sampling_local_a3000[, non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed))
}
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[, non_zero_index3[i]],
sampling = sampling_local_a3000[, non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed))
print(q)
}
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1001:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]],
sampling = sampling_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed))
print(q)
}
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1001:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]],
sampling = sampling_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed, color = "red")) +
geom_line(mapping = aes(x = X, y = sampling, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed", "sampling")) +
labs(x = "iteration", y = "local parameter value")
print(q)
}
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1001:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]],
sampling = sampling_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = sampling, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed", "sampling")) +
labs(x = "iteration", y = "local parameter value")
print(q)
}
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1001:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]],
sampling = sampling_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]])) +
#geom_line(mapping = aes(x = X, y = fixed, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = sampling, color = "blue"), alpha = 0.5) +
#scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
#                   labels = c("fixed", "sampling")) +
#labs(x = "iteration", y = "local parameter value")
print(q)
}
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1001:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]],
sampling = sampling_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]])) +
#geom_line(mapping = aes(x = X, y = fixed, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = sampling, color = "blue"), alpha = 0.5) +
#scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
#                   labels = c("fixed", "sampling")) +
labs(x = "iteration", y = "local parameter value")
print(q)
}
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1001:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]],
sampling = sampling_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = sampling, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed", "sampling")) +
labs(x = "iteration", y = "local parameter value")
print(q)
}
View(sampling_local_a3000)
View(fixed_local_a3000)
# fix와 sampling의 xi graph
fixed_a3000_log_xi <- log(fit_fixed_approximate_3000$global_shrinkage_parameter)
sampling_a3000_log_xi <- log(fit_sampling_approximate_3000$global_shrinkage_parameter)
# fix와 sampling의 xi graph
fixed_a3000_log_xi <- log(fit_fixed_approximate_3000$global_shrinkage_parameter)
sampling_a3000_log_xi <- log(fit_sampling_approximate_3000$global_shrinkage_parameter)
ggplot(data = data.frame(X = 1:length(fixed_a3000_log_xi),
fixed_log_xi = fixed_a3000_log_xi[1:length(fixed_a3000_log_xi)],
sampling_log_xi = sampling_a3000_log_xi[1:length(sampling_a3000_log_xi)])) +
geom_line(mapping = aes(x = X, y = fixed_log_xi, color = "red")) +
geom_line(mapping = aes(x = X, y = sampling_log_xi, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed_log_xi",
"sampling_log_xi"))
for (i in 1:length(non_zero_index3)) {
q <- ggplot(data = data.frame(X = 1001:nrow(fixed_local_a3000),
fixed = fixed_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]],
sampling = sampling_local_a3000[1001:nrow(fixed_local_a3000), non_zero_index3[i]])) +
geom_line(mapping = aes(x = X, y = fixed, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = sampling, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed", "sampling")) +
labs(x = "iteration", y = "local parameter value")
print(q)
}
# fix와 sampling의 sigma graph
fixed_a3000_sigma <- log(fit_fixed_approximate_3000$sigma_parameter)
sampling_a3000_sigma <- log(fit_sampling_approximate_3000$sigma_parameter)
ggplot(data = data.frame(X = 1:length(fixed_a3000_sigma),
fixed_sigma = fixed_a3000_sigma[1:length(fixed_a3000_sigma)],
sampling_sigma = sampling_a3000_sigma[1:length(sampling_a3000_sigma)])) +
geom_line(mapping = aes(x = X, y = fixed_sigma, color = "red")) +
geom_line(mapping = aes(x = X, y = sampling_sigma, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed_sigma",
"sampling_sigma"))
# fix와 sampling의 active_set graph
ggplot(data = data.frame(X = 101:nrow(fixed_a3000_spend_time$total_active_column),
fixed_active_set = fixed_a3000_spend_time$total_active_column[101:nrow(fixed_a3000_spend_time)],
sampling_active_set = sampling_a3000_spend_time$total_active_column[101:nrow(sampling_a3000_spend_time)])) +
geom_line(mapping = aes(x = X, y = fixed_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = sampling_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed_active_set", "sampling_active_set")) +
labs(x = "iteration", y = "number of active variable")
# fix와 sampling의 active_set graph
ggplot(data = data.frame(X = 101:nrow(fixed_a3000_spend_time),
fixed_active_set = fixed_a3000_spend_time$total_active_column[101:nrow(fixed_a3000_spend_time)],
sampling_active_set = sampling_a3000_spend_time$total_active_column[101:nrow(sampling_a3000_spend_time)])) +
geom_line(mapping = aes(x = X, y = fixed_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = sampling_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("fixed_active_set", "sampling_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 1000
ggplot(data = data.frame(X = 101:nrow(fixed_a1000_spend_time),
approximate_active_set = fixed_a1000_spend_time$total_active_column[101:nrow(fixed_a1000_spend_time)],
modified_active_set = fixed_m1000_spend_time$`number of active set columns`[101:nrow(fixed_m1000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 2000
ggplot(data = data.frame(X = 101:nrow(fixed_a2000_spend_time),
approximate_active_set = fixed_a2000_spend_time$total_active_column[101:nrow(fixed_a2000_spend_time)],
modified_active_set = fixed_m2000_spend_time$`number of active set columns`[101:nrow(fixed_m2000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 3000
ggplot(data = data.frame(X = 101:nrow(fixed_a3000_spend_time),
approximate_active_set = fixed_a3000_spend_time$total_active_column[101:nrow(fixed_a3000_spend_time)],
modified_active_set = fixed_m3000_spend_time$`number of active set columns`[101:nrow(fixed_m3000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 1000
ggplot(data = data.frame(X = 101:nrow(sampling_a1000_spend_time),
approximate_active_set = sampling_a1000_spend_time$total_active_column[101:nrow(sampling_a1000_spend_time)],
modified_active_set = sampling_m1000_spend_time$`number of active set columns`[101:nrow(sampling_m1000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 2000
ggplot(data = data.frame(X = 101:nrow(sampling_a2000_spend_time),
approximate_active_set = sampling_a2000_spend_time$total_active_column[101:nrow(sampling_a2000_spend_time)],
modified_active_set = sampling_m2000_spend_time$`number of active set columns`[101:nrow(sampling_m2000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# 3000
ggplot(data = data.frame(X = 101:nrow(sampling_a3000_spend_time),
approximate_active_set = sampling_a3000_spend_time$total_active_column[101:nrow(sampling_a3000_spend_time)],
modified_active_set = sampling_m3000_spend_time$`number of active set columns`[101:nrow(sampling_m3000_spend_time)])) +
geom_line(mapping = aes(x = X, y = approximate_active_set, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_active_set, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_active_set", "modified_active_set")) +
labs(x = "iteration", y = "number of active variable")
# sigma graph
simulation_sigma <- fit_fixed_approximate_1000$sigma_parameter
simulation_sigma2 <- fit_fixed_modified_1000$sigma2
ggplot(data = data.frame(X = 501:length(simulation_sigma),
approximate_sigma = simulation_sigma[501:length(simulation_sigma)],
modified_sigma = simulation_sigma2[501:length(simulation_sigma2)])) +
geom_line(mapping = aes(x = X, y = approximate_sigma, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_sigma, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_sigma", "modified_sigma"))
ggplot(data = data.frame(X = 501:length(simulation_sigma),
approximate_sigma = simulation_sigma[501:length(simulation_sigma)],
modified_sigma = simulation_sigma2[501:length(simulation_sigma2)])) +
geom_line(mapping = aes(x = X, y = approximate_sigma, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_sigma, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_sigma", "modified_sigma"))
# sigma graph
simulation_sigma <- fit_sampling_approximate_1000$sigma_parameter
simulation_sigma2 <- fit_sampling_modified_1000$sigma2
ggplot(data = data.frame(X = 501:length(simulation_sigma),
approximate_sigma = simulation_sigma[501:length(simulation_sigma)],
modified_sigma = simulation_sigma2[501:length(simulation_sigma2)])) +
geom_line(mapping = aes(x = X, y = approximate_sigma, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_sigma, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_sigma", "modified_sigma"))
mean(fit_fixed_approximate_1000$sigma_parameter[1001:5000])
mean(fit_fixed_modified_1000$sigma_parameter[1001:5000])
mean(fit_fixed_modified_1000$sigma2[1001:5000])
mean(fit_sampling_approximate_1000$sigma_parameter[1001:5000])
mean(fit_sampling_modified_1000$sigma2[1001:5000])
# xi graph
simulation_log_xi <- log(fit_fixed_approximate_1000$sigma_parameter)
simulation_log_xi2 <- log(fit_fixed_modified_1000$sigma2)
ggplot(data = data.frame(X = 1:length(simulation_log_xi),
approximate_log_xi = simulation_log_xi[1:length(simulation_log_xi)],
modified_log_xi = simulation_log_xi2[1:length(simulation_log_xi2)])) +
geom_line(mapping = aes(x = X, y = approximate_log_xi, color = "red")) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "blue")) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_log_xi",
"modified_log_xi"))
ggplot(data = data.frame(X = 1:length(simulation_log_xi),
approximate_log_xi = simulation_log_xi[1:length(simulation_log_xi)],
modified_log_xi = simulation_log_xi2[1:length(simulation_log_xi2)])) +
geom_line(mapping = aes(x = X, y = approximate_log_xi, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_log_xi",
"modified_log_xi"))
log(fit_fixed_approximate_1000$sigma_parameter)
# xi graph
simulation_log_xi <- log(fit_fixed_approximate_1000$global_shrinkage_parameter)
simulation_log_xi2 <- log(fit_fixed_modified_1000$global_shrinkage_parameter)
ggplot(data = data.frame(X = 1:length(simulation_log_xi),
approximate_log_xi = simulation_log_xi[1:length(simulation_log_xi)],
modified_log_xi = simulation_log_xi2[1:length(simulation_log_xi2)])) +
geom_line(mapping = aes(x = X, y = approximate_log_xi, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_log_xi",
"modified_log_xi"))
# xi graph
simulation_log_xi <- log(fit_sampling_approximate_1000$global_shrinkage_parameter)
simulation_log_xi2 <- log(fit_sampling_modified_1000$global_shrinkage_parameter)
ggplot(data = data.frame(X = 1:length(simulation_log_xi),
approximate_log_xi = simulation_log_xi[1:length(simulation_log_xi)],
modified_log_xi = simulation_log_xi2[1:length(simulation_log_xi2)])) +
geom_line(mapping = aes(x = X, y = approximate_log_xi, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_log_xi",
"modified_log_xi"))
# sigma graph
simulation_sigma <- fit_sampling_approximate_2000$sigma_parameter
simulation_sigma2 <- fit_sampling_modified_2000$sigma2
mean(fit_fixed_approximate_2000$sigma_parameter[1001:5000])
mean(fit_fixed_modified_2000$sigma2[1001:5000])
mean(fit_sampling_approximate_2000$sigma_parameter[1001:5000])
mean(fit_sampling_modified_2000$sigma2[1001:5000])
ggplot(data = data.frame(X = 501:length(simulation_sigma),
approximate_sigma = simulation_sigma[501:length(simulation_sigma)],
modified_sigma = simulation_sigma2[501:length(simulation_sigma2)])) +
geom_line(mapping = aes(x = X, y = approximate_sigma, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_sigma, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_sigma", "modified_sigma"))
var(z2)
mean(z2)
z2 - W2[, non_zero_index2] %*% non_zero_coefficents2
var(z2 - W2[, non_zero_index2] %*% non_zero_coefficents2)
var(z1 - W1[, non_zero_index1] %*% non_zero_coefficents1)
var(z3 - W3[, non_zero_index3] %*% non_zero_coefficents3)
mean(fit_fixed_approximate_2000$sigma_parameter[1001:5000])
mean(fit_fixed_modified_2000$sigma2[1001:5000])
mean(fit_sampling_approximate_2000$sigma_parameter[1001:5000])
mean(fit_sampling_modified_2000$sigma2[1001:5000])
# xi graph
simulation_log_xi <- log(fit_sampling_approximate_2000$global_shrinkage_parameter)
simulation_log_xi2 <- log(fit_sampling_modified_2000$global_shrinkage_parameter)
ggplot(data = data.frame(X = 1:length(simulation_log_xi),
approximate_log_xi = simulation_log_xi[1:length(simulation_log_xi)],
modified_log_xi = simulation_log_xi2[1:length(simulation_log_xi2)])) +
geom_line(mapping = aes(x = X, y = approximate_log_xi, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_log_xi",
"modified_log_xi"))
mean(fit_fixed_approximate_3000$sigma_parameter[1001:5000])
mean(fit_fixed_modified_3000$sigma2[1001:5000])
mean(fit_sampling_approximate_3000$sigma_parameter[1001:5000])
mean(fit_sampling_modified_3000$sigma2[1001:5000])
# xi graph
simulation_log_xi <- log(fit_sampling_approximate_3000$global_shrinkage_parameter)
simulation_log_xi2 <- log(fit_sampling_modified_3000$global_shrinkage_parameter)
ggplot(data = data.frame(X = 1:length(simulation_log_xi),
approximate_log_xi = simulation_log_xi[1:length(simulation_log_xi)],
modified_log_xi = simulation_log_xi2[1:length(simulation_log_xi2)])) +
geom_line(mapping = aes(x = X, y = approximate_log_xi, color = "red"), alpha = 0.5) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "blue"), alpha = 0.5) +
scale_color_manual(values = c("red", "blue"), breaks = c("red", "blue"),
labels = c("approximate_log_xi",
"modified_log_xi"))
library(tidyverse)
library(invgamma)
library(MASS)
library(Rcpp)
library(horseshoe)
library(tictoc)
library(Mhorseshoe)
library(tidyverse)
library(webp)
# webp 폴더들을 입력받아서 각각을 jpg 파일로 처리하여 저장
folder_path <- "C:/Users/rkdal/OneDrive/바탕 화면/새 폴더"
webp_folder_dir <- list.dirs(path = folder_path)[-1]
remove_webp <- TRUE
# 본문
for (i in 1:length(webp_folder_dir)) {
# 폴더의 파일 리스트 추출
file_list <- list.files(path = webp_folder_dir[i])
# 확장자를 제외한 문자만 추출
webp_name <- str_extract(list.files(path = webp_folder_dir[i]),
pattern = ".+\\.")
# webp 파일을 불러오고, jpeg 확장자로 저장
for (j in 1:length(webp_name)) {
webp_img <- webp::read_webp(source = paste0(webp_folder_dir[i], "/", file_list[j]))
webp::write_webp(webp_img, paste0(webp_folder_dir[i], "/", webp_name[j], "jpeg"))
}
# 기존 webp 파일 삭제 옵션
if(remove_webp){
file.remove(paste0(webp_folder_dir[i], "/", file_list))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(invgamma)
library(MASS)
library(Rcpp)
library(horseshoe)
library(tictoc)
library(Mhorseshoe)
# 시뮬레이션 데이터 3
response_list3 <- readRDS(file = "response_list3.rds")
W3 <- response_list3[[1]]
z3 <- response_list3[[2]]
non_zero_index3 <- response_list3[[3]]
non_zero_coefficents3 <- response_list3[[4]]
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
fit_fixed_approximate_3000 <- Mhorseshoe::approximate_algorithm(W3, z3, iteration = 5000,
s = 0.01, xi = 1,
step_check = TRUE)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
fit_fixed_approximate_3000 <- Mhorseshoe::approximate_algorithm(W3, z3, iteration = 5000,
s = 0.01, xi = 1,
step_check = TRUE)
fit_fixed_approximate_3000 <- Mhorseshoe::approximate_algorithm(W3, z3, iteration = 5000,
s = 0.1, xi = 1,
step_check = TRUE)
fit_fixed_approximate_3000 <- Mhorseshoe::approximate_algorithm(W3, z3, iteration = 5000,
s = 1, xi = 1,
step_check = TRUE)
library(Mhorseshoe)
knitr::opts_chunk$set(echo = TRUE)
fit_sampling_modified_3000 <- Mhorseshoe::sampling_modified(W3, z3, iteration = 5000,
s = 0.01, xi = 1,
step_check = TRUE)
fit_sampling_modified_3000 <- Mhorseshoe::sampling_modified(W3, z3, iteration = 5000,
s = 1, xi = 1,
step_check = TRUE)
fit_sampling_modified_3000 <- Mhorseshoe::sampling_modified(W3, z3, iteration = 5000,
s = 1, xi = 1000,
step_check = TRUE)
fit_sampling_approximate_3000 <- Mhorseshoe::approximate_algorithm(W3, z3, iteration = 5000,
s = 1, xi = 1000,
step_check = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# 시뮬레이션 데이터 3
response_list3 <- readRDS(file = "response_list3.rds")
W3 <- response_list3[[1]]
z3 <- response_list3[[2]]
non_zero_index3 <- response_list3[[3]]
non_zero_coefficents3 <- response_list3[[4]]
library(tidyverse)
library(invgamma)
library(MASS)
library(Rcpp)
library(horseshoe)
library(tictoc)
library(Mhorseshoe)
var(z3)
mean(z3)
log((1/((1/99) * 1 / sqrt(500)))^2)
