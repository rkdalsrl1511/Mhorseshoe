break;
case 2:
fl = rcpp_dfex(eps, a/eps) + l2 * (z - a/eps);
break;
case 3:
fl = rcpp_dfex(eps, 1/eps) + l3 * (z - b/eps);
break;
default:
fl = rcpp_dfex(eps, b/eps) + eps * (z - b/eps);
break;
}
return fl;
}
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler2(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
double eps = epsilon[i];
double l2 = calculate_dlambda(eps, a, 1);
double l3 = calculate_dlambda(eps, 1, b);
double A = rcpp_dfex(eps, a/eps);
double I = rcpp_dfex(eps, 1/eps);
double B = rcpp_dfex(eps, b/eps);
NumericVector prob(4);
prob[0] = log(1+a/eps);
prob[1] = prob[0] + (1/l2) * exp(-A) * (1 - exp(-(I-A)));
prob[2] = prob[1] + (1/l3) * exp(-I) * (1 - exp(-(B-I)));
prob[3] = prob[2] + (1/eps) * exp(-B);
prob = prob / prob[3];
NumericVector u = Rcpp::runif(1, 0, 1);
int selected_interval;
if(u[0] < prob[0]){
selected_interval = 1;
} else if(u[0] < prob[1]){
selected_interval = 2;
} else if(u[0] < prob[2]){
selected_interval = 3;
} else{
selected_interval = 4;
}
NumericVector u_z = Rcpp::runif(1, 0, 1);
double z = sample_z(selected_interval, eps, l2, l3, u_z[0], a, b);
double fl = rcpp_fl(selected_interval, eps, z, a, b, l2, l3);
double f = rcpp_dfex(eps, z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
mean(rcpp_rejection_sampler2(epsilon, a, b))
microbenchmark(rcpp_rejection_sampler(epsilon, a, b),
rcpp_rejection_sampler2(epsilon, a, b), times = 1000)
src <- "
#include <Rcpp.h>
using namespace Rcpp;
NumericVector rcpp_fex(NumericVector epsilon, NumericVector x){
NumericVector fex = epsilon * x + log(1+x);
return fex;
}
double rcpp_dfex(double eps, double x){
double dfex = eps * x + log(1 + x);
return dfex;
}
NumericVector calculate_lambda(NumericVector epsilon, double x, double y){
NumericVector lambda = (rcpp_fex(epsilon, y/epsilon) - rcpp_fex(epsilon, x/epsilon)) / (y/epsilon - x/epsilon);
return lambda;
}
double sample_z(int selected_interval, double eps, double l2, double l3, double u, double a, double b){
double z;
if(selected_interval == 1){
z = exp(u * log(1 + a/eps))-1;
} else if(selected_interval == 2){
z = a/eps - log(1-u+u*exp(-(rcpp_dfex(eps, 1/eps)-rcpp_dfex(eps, a/eps))))/l2;
} else if(selected_interval == 3){
z = 1/eps-log(1-u+u*exp(-(rcpp_dfex(eps, b/eps)-rcpp_dfex(eps, 1/eps))))/l3;
} else{
z = b/eps-log(1-u)/eps;
}
return z;
}
double rcpp_fl(int selected_interval, double eps, double z, double a, double b, double l2, double l3){
double fl;
if(selected_interval == 1){
fl = log(1+z);
} else if(selected_interval == 2){
fl = rcpp_dfex(eps, a/eps) + l2 * (z - a/eps);
} else if(selected_interval == 3){
fl = rcpp_dfex(eps, 1/eps) + l3 * (z - b/eps);
} else{
fl = rcpp_dfex(eps, b/eps) + eps * (z - b/eps);
}
return fl;
}
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector lambda2 = calculate_lambda(epsilon, a, 1);
NumericVector lambda3 = calculate_lambda(epsilon, 1, b);
NumericVector A = rcpp_fex(epsilon, a/epsilon);
NumericVector I = rcpp_fex(epsilon, 1/epsilon);
NumericVector B = rcpp_fex(epsilon, b/epsilon);
NumericMatrix total_prob (p, 4);
total_prob(_, 0) = log(1+a/epsilon);
total_prob(_, 1) = total_prob(_, 0) + (1/lambda2) * exp(-A) * (1 - exp(-(I-A)));
total_prob(_, 2) = total_prob(_, 1) + (1/lambda3) * exp(-I) * (1 - exp(-(B-I)));
total_prob(_, 3) = total_prob(_, 2) + (1/epsilon) * exp(-B);
total_prob(_, 0) = total_prob(_, 0) / total_prob(_, 3);
total_prob(_, 1) = total_prob(_, 1) / total_prob(_, 3);
total_prob(_, 2) = total_prob(_, 2) / total_prob(_, 3);
std::fill(total_prob(_, 3).begin(), total_prob(_, 3).end(), 1);
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
NumericVector u = Rcpp::runif(1, 0, 1);
int selected_interval;
if(u[0] < total_prob(i, 0)){
selected_interval = 1;
} else if(u[0] < total_prob(i, 1)){
selected_interval = 2;
} else if(u[0] < total_prob(i, 2)){
selected_interval = 3;
} else{
selected_interval = 4;
}
NumericVector u_z = Rcpp::runif(1, 0, 1);
double z = sample_z(selected_interval, epsilon[i], lambda2[i], lambda3[i], u_z[0], a, b);
double fl = rcpp_fl(selected_interval, epsilon[i], z, a, b, lambda2[i], lambda3[i]);
double f = rcpp_dfex(epsilon[i], z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
mean(rcpp_rejection_sampler(epsilon, a, b))
microbenchmark(rcpp_rejection_sampler(epsilon, a, b),
rcpp_rejection_sampler2(epsilon, a, b), times = 1000)
library(Mhorseshoe)
library(Mhorseshoe)
library(Mhorseshoe)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Mhorseshoe)
library(ggplot2)
library(horseshoe)
# making simulation data.
set.seed(123)
N <- 300
p <- 500
p_star <- 50
true_beta <- c(rep(1, p_star), rep(0, p-p_star))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:p_star) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
# exact_horseshoe.
exact_horseshoe_result <- exact_horseshoe(X, y, iteration = 500)
# exact_horseshoe.
exact_horseshoe_result <- exact_horseshoe(X, y, iteration = 500)
library(Mhorseshoe)
# exact_horseshoe.
exact_horseshoe_result <- exact_horseshoe(X, y, iteration = 500)
exact_horseshoe_postmean <- apply(exact_horseshoe_result$BetaSamples,
MARGIN = 2, mean)
exact_horseshoe_leftCI <- apply(exact_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.025)
exact_horseshoe_rightCI <- apply(exact_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.975)
# horseshoe in horseshoe package.
horseshoe_result <- horseshoe::horseshoe(y, X, method.tau = "halfCauchy",
method.sigma = "Jeffreys",
burn = 0, nmc = 500)
# exact_horseshoe.
exact_horseshoe_result <- exact_horseshoe(X, y, iteration = 500)
exact_horseshoe_postmean <- apply(exact_horseshoe_result$BetaSamples,
MARGIN = 2, mean)
exact_horseshoe_leftCI <- apply(exact_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.025)
exact_horseshoe_rightCI <- apply(exact_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.975)
df <- data.frame(index = 1:100,
horseshoe_postmean = horseshoe_result$BetaHat[1:100],
horseshoe_leftCI = horseshoe_result$LeftCI[1:100],
horseshoe_rightCI = horseshoe_result$RightCI[1:100],
exact_horseshoe_postmean = exact_horseshoe_postmean[1:100],
exact_horseshoe_leftCI = exact_horseshoe_leftCI[1:100],
exact_horseshoe_rightCI = exact_horseshoe_rightCI[1:100],
true_beta = true_beta[1:100])
# Estimation results of the horseshoe.
ggplot(data = df, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = horseshoe_leftCI,
ymax = horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the horseshoe function", y = "beta")
# Estimation results of the exact_horseshoe.
ggplot(data = df, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = exact_horseshoe_postmean),
size = 2, col = "red") +
geom_errorbar(aes(ymin = exact_horseshoe_leftCI,
ymax = exact_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the exact_horseshoe function",
y = "beta")
# approx_horseshoe.
approx_horseshoe_result <- approx_horseshoe(X, y, iteration = 500)
approx_horseshoe_postmean <- apply(approx_horseshoe_result$BetaSamples,
MARGIN = 2, mean)
approx_horseshoe_leftCI <- apply(approx_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.025)
approx_horseshoe_rightCI <- apply(approx_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.975)
# mapprox_horseshoe.
mapprox_horseshoe_result <- mapprox_horseshoe(X, y, iteration = 500)
mapprox_horseshoe_postmean <- apply(mapprox_horseshoe_result$BetaSamples,
MARGIN = 2, mean)
mapprox_horseshoe_leftCI <- apply(mapprox_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.025)
mapprox_horseshoe_rightCI <- apply(mapprox_horseshoe_result$BetaSamples,
MARGIN = 2, quantile, probs = 0.975)
df2 <- data.frame(index = 1:100,
approx_horseshoe_postmean = approx_horseshoe_postmean[1:100],
approx_horseshoe_leftCI = approx_horseshoe_leftCI[1:100],
approx_horseshoe_rightCI = approx_horseshoe_rightCI[1:100],
mapprox_horseshoe_postmean = mapprox_horseshoe_postmean[1:100],
mapprox_horseshoe_leftCI = mapprox_horseshoe_leftCI[1:100],
mapprox_horseshoe_rightCI = mapprox_horseshoe_rightCI[1:100],
true_beta = true_beta[1:100])
# Estimation results of the approx_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = approx_horseshoe_postmean), size = 2, col = "red") +
geom_errorbar(aes(ymin = approx_horseshoe_leftCI,
ymax = approx_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the approx_horseshoe", y = "beta")
# Estimation results of the mapprox_horseshoe.
ggplot(data = df2, aes(x = index, y = true_beta)) +
geom_point(size = 2) +
geom_point(aes(x = index, y = mapprox_horseshoe_postmean),
size = 2, col = "red") +
geom_errorbar(aes(ymin = mapprox_horseshoe_leftCI,
ymax = mapprox_horseshoe_rightCI), width = .1, col = "red") +
labs(title = "95% Credible intervals of the mapprox_horseshoe", y = "beta")
exact_horseshoe_activeset <- rep(p, 500)
approx_horseshoe_activeset <- approx_horseshoe_result$ActiveSamples
mapprox_horseshoe_activeset <- mapprox_horseshoe_result$ActiveSamples
# active set plot
ggplot(data = data.frame(X = 1:500,
exact_horseshoe_activeset = exact_horseshoe_activeset,
approx_horseshoe_activeset = approx_horseshoe_activeset,
mapprox_horseshoe_activeset = mapprox_horseshoe_activeset)) +
geom_line(mapping = aes(x = X, y = exact_horseshoe_activeset, color = "exact")) +
geom_line(mapping = aes(x = X, y = approx_horseshoe_activeset, color = "approx"),
alpha = 0.5) +
geom_line(mapping = aes(x = X, y = mapprox_horseshoe_activeset, color = "mapprox"),
alpha = 0.5) +
scale_color_manual(name = "algorithm",
values = c("black", "red", "blue"),
breaks = c("exact", "approx", "mapprox"),
labels = c("exact", "approx", "mapprox"))
Rcpp::Rcpp.package.skeleton("example")
library(Mhorseshoe)
library(Mhorseshoe)
library(Mhorseshoe)
library(Mhorseshoe)
devtools::check_win_devel()
knitr::opts_chunk$set(echo = TRUE)
library(Mhorseshoe)
library(tictoc)
# making simulation data.
set.seed(123)
N <- 500
p <- 5000
p_star <- 50
true_beta <- c(rep(1, p_star), rep(0, p-p_star))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:p_star) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
exact_example <- Mhorseshoe::exact_horseshoe(X, y)
tic()
approx_example <- Mhorseshoe::approx_horseshoe(X, y)
# making simulation data.
set.seed(123)
N <- 500
p <- 5000
p_star <- 20
true_beta <- c(rep(1, p_star), rep(0, p-p_star))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:p_star) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
tic()
approx_example <- Mhorseshoe::approx_horseshoe(X, y)
# making simulation data.
set.seed(123)
N <- 200
p <- 1000
p_star <- 10
true_beta <- c(rep(1, p_star), rep(0, p-p_star))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:p_star) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
tic()
mapprox_example <- Mhorseshoe::mapprox_horseshoe(X, y, iteration = 10000)
toc()
tic()
approx_example <- Mhorseshoe::approx_horseshoe(X, y, iteration = 10000)
toc()
# example beta trace plot
example_beta <- approx_example$BetaSamples
# example beta trace plot
example_beta <- approx_example$BetaSamples
for (i in 1:10) {
q <- ggplot(data = data.frame(X = 1:nrow(example_beta),
Y = example_beta[1:nrow(example_beta), example_non_zero_index[i]])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", example_non_zero_index[i]), y = "value",
title = str_c("true value = ", 1)) +
coord_cartesian(ylim = c(min(example_beta[1:nrow(example_beta), i]),
max(example_beta[1:nrow(example_beta), i])))
print(q)
}
library(tidyverse)
# example beta trace plot
example_beta <- approx_example$BetaSamples
for (i in 1:10) {
q <- ggplot(data = data.frame(X = 1:nrow(example_beta),
Y = example_beta[1:nrow(example_beta), example_non_zero_index[i]])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", example_non_zero_index[i]), y = "value",
title = str_c("true value = ", 1)) +
coord_cartesian(ylim = c(min(example_beta[1:nrow(example_beta), i]),
max(example_beta[1:nrow(example_beta), i])))
print(q)
}
# example beta trace plot
example_beta <- approx_example$BetaSamples
for (i in 1:10) {
q <- ggplot(data = data.frame(X = 1:nrow(example_beta),
Y = example_beta[1:nrow(example_beta), example_non_zero_index[i]])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", i), y = "value",
title = str_c("true value = ", 1)) +
coord_cartesian(ylim = c(min(example_beta[1:nrow(example_beta), i]),
max(example_beta[1:nrow(example_beta), i])))
print(q)
}
# example beta trace plot
example_beta <- approx_example$BetaSamples
for (i in 1:10) {
q <- ggplot(data = data.frame(X = 1:nrow(example_beta),
Y = example_beta[1:nrow(example_beta), i])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", i), y = "value",
title = str_c("true value = ", 1)) +
coord_cartesian(ylim = c(min(example_beta[1:nrow(example_beta), i]),
max(example_beta[1:nrow(example_beta), i])))
print(q)
}
example_beta <- mapprox_example$BetaSamples
for (i in 1:10) {
q <- ggplot(data = data.frame(X = 1:nrow(example_beta),
Y = example_beta[1:nrow(example_beta), i])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", i), y = "value",
title = str_c("true value = ", 1)) +
coord_cartesian(ylim = c(min(example_beta[1:nrow(example_beta), i]),
max(example_beta[1:nrow(example_beta), i])))
print(q)
}
# making simulation data.
set.seed(123)
N <- 500
p <- 5000
p_star <- 20
true_beta <- c(rep(1, p_star), rep(0, p-p_star))
# design matrix X.
X <- matrix(1, nrow = N, ncol = p)
for (i in 1:p) {
X[, i] <- stats::rnorm(N, mean = 0, sd = 1)
}
# response variable y.
y <- vector(mode = "numeric", length = N)
e <- rnorm(N, mean = 0, sd = 2)
for (i in 1:p_star) {
y <- y + true_beta[i] * X[, i]
}
y <- y + e
tic()
mapprox_example <- Mhorseshoe::mapprox_horseshoe(X, y, iteration = 10000)
toc()
example_beta <- mapprox_example$BetaSamples
for (i in 1:20) {
q <- ggplot(data = data.frame(X = 1:nrow(example_beta),
Y = example_beta[1:nrow(example_beta), i])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", i), y = "value",
title = str_c("true value = ", 1)) +
coord_cartesian(ylim = c(min(example_beta[1:nrow(example_beta), i]),
max(example_beta[1:nrow(example_beta), i])))
print(q)
}
# xi graph
m_example_log_xi <- log(mapprox_example$TauSamples^(-2))
ggplot(data = data.frame(X = 1:length(m_example_log_xi),
modified_log_xi = m_example_log_xi[1:length(m_example_log_xi)])) +
geom_line(mapping = aes(x = X, y = modified_log_xi, color = "red"))
tic()
t(X) %*% X
toc()
m_example_sigma <- mapprox_example$Sigma2Samples
ggplot(data = data.frame(X = 1:length(m_example_sigma),
Y = m_example_sigma)) +
geom_line(mapping = aes(x = X, y = Y))
ggplot(data = data.frame(X = 1:length(m_example_active),
Y = m_example_active)) +
geom_line(mapping = aes(x = X, y = Y))
m_example_active <- mapprox_example$ActiveSamples
ggplot(data = data.frame(X = 1:length(m_example_active),
Y = m_example_active)) +
geom_line(mapping = aes(x = X, y = Y))
ggplot(data = data.frame(X = 101:length(m_example_active),
Y = m_example_active[101:10000])) +
geom_line(mapping = aes(x = X, y = Y))
tic()
approx_example <- Mhorseshoe::approx_horseshoe(X, y, iteration = 10000)
toc()
m_example_active <- approx_example$ActiveSamples
ggplot(data = data.frame(X = 101:length(m_example_active),
Y = m_example_active[101:10000])) +
geom_line(mapping = aes(x = X, y = Y))
m_example_active <- mapprox_example$ActiveSamples
example_active <- approx_example$ActiveSamples
ggplot(data = data.frame(X = 101:length(m_example_active),
Y = m_example_active[101:10000],
Y2 = example_active[101:10000])) +
geom_line(mapping = aes(x = X, y = Y, color = "m")) +
geom_line(mapping = aes(x = X, y = Y2, color = "a"))
ggplot(data = data.frame(X = 101:length(m_example_active),
Y = m_example_active[101:10000],
Y2 = example_active[101:10000])) +
geom_line(mapping = aes(x = X, y = Y, color = "m")) +
geom_line(mapping = aes(x = X, y = Y2, color = "a"), alpha = 0.5)
