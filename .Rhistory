chain_local1 <- fit_amcmc1$local_shrinkage_parameter[5001:10000, -non_zero_index]
chain_local2 <- fit_amcmc2$local_shrinkage_parameter[5001:10000, -non_zero_index]
chain_local3 <- fit_amcmc3$local_shrinkage_parameter[5001:10000, -non_zero_index]
chain_local4 <- fit_amcmc4$local_shrinkage_parameter[5001:10000, -non_zero_index]
chain_local5 <- fit_amcmc5$local_shrinkage_parameter[5001:10000, -non_zero_index]
Bolstad2::GelmanRubin(theta = cbind(chain_local1[, 1],
chain_local2[, 1],
chain_local3[, 1],
chain_local4[, 1],
chain_local5[, 1]))
chain_local1 <- fit_amcmc1$local_shrinkage_parameter[5001:10000, ]
chain_local2 <- fit_amcmc2$local_shrinkage_parameter[5001:10000, ]
chain_local3 <- fit_amcmc3$local_shrinkage_parameter[5001:10000, ]
chain_local4 <- fit_amcmc4$local_shrinkage_parameter[5001:10000, ]
chain_local5 <- fit_amcmc5$local_shrinkage_parameter[5001:10000, ]
gr <- rep(0, p)
gr <- rep(0, p)
for (i in 1:p) {
gr[i] <- Bolstad2::GelmanRubin(theta = cbind(chain_local1[, i],
chain_local2[, i],
chain_local3[, i],
chain_local4[, i],
chain_local5[, i]))
}
gr
k <- Bolstad2::GelmanRubin(theta = cbind(chain_local1[, 1],
chain_local2[, 1],
chain_local3[, 1],
chain_local4[, 1],
chain_local5[, 1]))
k$R
k$vHat
k$n
k$B
k$B
k$B
k$W
k$vHat
k$R
k <- Bolstad2::GelmanRubin(theta = cbind(chain_local1[, 1],
chain_local2[, 1],
chain_local3[, 1],
chain_local4[, 1],
chain_local5[, 1]))$R
gr <- rep(0, p)
for (i in 1:p) {
gr[i] <- Bolstad2::GelmanRubin(theta = cbind(chain_local1[, i],
chain_local2[, i],
chain_local3[, i],
chain_local4[, i],
chain_local5[, i]))$R
}
gr
gr <- rep(0, p)
gr <- rep(0, p)
for (i in 1:p) {
gr[i] <- Bolstad2::GelmanRubin(theta = cbind(chain1_beta[, i],
chain2_beta[, i],
chain2_beta[, i],
chain2_beta[, i],
chain2_beta[, i]))$R
}
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:10000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:10000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:10000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:10000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:10000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:5000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:5000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:5000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:5000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:5000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:10000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:10000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:10000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:10000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:10000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_beta1 <- fit_amcmc1$beta[5001:10000, ]
chain_beta2 <- fit_amcmc2$beta[5001:10000, ]
chain_beta3 <- fit_amcmc3$beta[5001:10000, ]
chain_beta4 <- fit_amcmc4$beta[5001:10000, ]
chain_beta5 <- fit_amcmc5$beta[5001:10000, ]
gr <- rep(0, p)
gr <- rep(0, p)
for (i in 1:p) {
gr[i] <- Bolstad2::GelmanRubin(theta = cbind(chain_beta1[, i],
chain_beta2[, i],
chain_beta3[, i],
chain_beta4[, i],
chain_beta5[, i]))$R
}
fit_amcmc1 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 20000)
fit_amcmc2 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 20000)
fit_amcmc3 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 20000)
fit_amcmc4 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 20000)
fit_amcmc5 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 20000)
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:20000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:20000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:20000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:20000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:20000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[10001:20000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[10001:20000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[10001:20000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[10001:20000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[10001:20000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[10001:20000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[10001:20000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[10001:20000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[10001:20000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[10001:20000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_beta1 <- fit_amcmc1$beta[10001:20000, ]
chain_beta2 <- fit_amcmc2$beta[10001:20000, ]
chain_beta3 <- fit_amcmc3$beta[10001:20000, ]
chain_beta4 <- fit_amcmc4$beta[10001:20000, ]
chain_beta5 <- fit_amcmc5$beta[10001:20000, ]
gr <- rep(0, p)
for (i in 1:p) {
gr[i] <- Bolstad2::GelmanRubin(theta = cbind(chain_beta1[, i],
chain_beta2[, i],
chain_beta3[, i],
chain_beta4[, i],
chain_beta5[, i]))$R
}
gr
ggplot(data = data.frame(X = 1:length(chain_global1), Y = chain_global1)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain1's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global2), Y = chain_global2)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain2's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global3), Y = chain_global3)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain3's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global4), Y = chain_global4)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain4's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global5), Y = chain_global5)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain5's global shrinkage parameter")
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[10001:15000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[10001:15000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[10001:15000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[10001:15000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[10001:15000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[15001:20000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[15001:20000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[15001:20000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[15001:20000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[15001:20000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:20000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:20000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:20000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:20000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:20000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))$n
ggplot(data = data.frame(X = 1:length(chain_global1), Y = chain_global1)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain1's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global2), Y = chain_global2)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain2's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global3), Y = chain_global3)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain3's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global4), Y = chain_global4)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain4's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global5), Y = chain_global5)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain5's global shrinkage parameter")
ggplot(data = data.frame(X = 1:nrow(chain1_beta), Y = chain1_beta[, 1])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[1]),
y = "value",
title = str_c("true value = ", non_zero_coefficents[1])) +
coord_cartesian(ylim = c(3, 7))
ggplot(data = data.frame(X = 1:nrow(chain1_beta), Y = chain1_beta[, 1])) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(x = str_c("beta ", non_zero_index[1]),
y = "value",
title = str_c("true value = ", non_zero_coefficents[1]))
# 시뮬레이션 데이터 생성
N <- 100
p <- 100
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
toc()
fit_amcmc1 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
fit_amcmc2 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
fit_amcmc3 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
fit_amcmc4 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
fit_amcmc5 <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:10000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:10000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:10000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:10000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:10000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[5001:10000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[5001:10000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[5001:10000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[5001:10000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[5001:10000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
# 시뮬레이션 데이터 생성
N <- 200
p <- 3000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
toc()
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 10000)
toc()
fit_amcmc1 <- Mhorseshoe::approximate_algorithm(standardized_W, z, s = 0.1,
iteration = 10000)
fit_amcmc2 <- Mhorseshoe::approximate_algorithm(standardized_W, z, s = 0.1,
iteration = 10000)
fit_amcmc3 <- Mhorseshoe::approximate_algorithm(standardized_W, z, s = 0.1,
iteration = 10000)
fit_amcmc4 <- Mhorseshoe::approximate_algorithm(standardized_W, z, s = 0.1,
iteration = 10000)
fit_amcmc5 <- Mhorseshoe::approximate_algorithm(standardized_W, z, s = 0.1,
iteration = 10000)
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[5001:10000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[5001:10000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[5001:10000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[5001:10000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[5001:10000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
ggplot(data = data.frame(X = 1:length(chain_global1), Y = chain_global1)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain1's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global2), Y = chain_global2)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain2's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global3), Y = chain_global3)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain3's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global4), Y = chain_global4)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain4's global shrinkage parameter")
ggplot(data = data.frame(X = 1:length(chain_global5), Y = chain_global5)) +
geom_line(mapping = aes(x = X, y = Y)) +
labs(title = "Chain5's global shrinkage parameter")
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:10000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:10000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:10000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:10000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:10000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:2000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:2000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:2000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:2000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:2000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
chain_global1 <- fit_amcmc1$global_shrinkage_parameter[1:1000]
chain_global2 <- fit_amcmc2$global_shrinkage_parameter[1:1000]
chain_global3 <- fit_amcmc3$global_shrinkage_parameter[1:1000]
chain_global4 <- fit_amcmc4$global_shrinkage_parameter[1:1000]
chain_global5 <- fit_amcmc5$global_shrinkage_parameter[1:1000]
Bolstad2::GelmanRubin(theta = cbind(chain_global1,
chain_global2,
chain_global3,
chain_global4,
chain_global5))
global <- fit_amcmc$global_shrinkage_parameter
K <- 1000
batch <- rep(0, 10)
batch_mean <- rep(0, 10)
for (i in 1:10) {
batch_mean[i] <- mean(global[1000*(i-1) + 1, 1000 * i])
}
for (i in 1:10) {
batch_mean[i] <- mean(global[(1000*(i-1) + 1):(1000 * i)])
}
global <- fit_amcmc$global_shrinkage_parameter
M <- 10
K <- 1000
batch <- rep(0, 10)
for (i in 1:10) {
batch[i] <- mean(global[(1000*(i-1) + 1):(1000 * i)])
}
batch_mean <- sum(batch)/M
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
global <- fit_amcmc$global_shrinkage_parameter
M <- 10
K <- 1000
batch <- rep(0, 10)
for (i in 1:10) {
batch[i] <- mean(global[(1000*(i-1) + 1):(1000 * i)])
}
batch_mean <- sum(batch)/M
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
MCSE
global <- fit_amcmc$global_shrinkage_parameter
M <- 10
K <- 1000
batch <- rep(0, M)
for (i in 1:10) {
batch[i] <- mean(global[(K*(i-1) + 1):(K * i)])
}
batch_mean <- sum(batch)/M
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
MCSE
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_amcmc <- Mhorseshoe::approximate_algorithm(standardized_W, z,
iteration = 20000)
toc()
global <- fit_amcmc$global_shrinkage_parameter
M <- 10
K <- 1000
batch <- rep(0, M)
for (i in 1:10) {
batch[i] <- mean(global[(K*(i-1) + 1):(K * i)])
}
batch_mean <- mean(batch)
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
MCSE
beta1 <- fit_amcmc$beta[, non_zero_index[1]]
global <- fit_amcmc$global_shrinkage_parameter
M <- 20
K <- 2000
batch <- rep(0, M)
for (i in 1:10) {
batch[i] <- mean(global[(K*(i-1) + 1):(K * i)])
}
batch_mean <- mean(batch)
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
MCSE
global <- fit_amcmc$global_shrinkage_parameter
M <- 20
K <- 1000
batch <- rep(0, M)
for (i in 1:10) {
batch[i] <- mean(global[(K*(i-1) + 1):(K * i)])
}
batch_mean <- mean(batch)
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
MCSE
global <- fit_amcmc$global_shrinkage_parameter
M <- 10
K <- 2000
batch <- rep(0, M)
for (i in 1:10) {
batch[i] <- mean(global[(K*(i-1) + 1):(K * i)])
}
batch_mean <- mean(batch)
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
MCSE
beta1 <- fit_amcmc$beta[, non_zero_index[1]]
M <- 10
K <- 2000
batch <- rep(0, M)
for (i in 1:10) {
batch[i] <- mean(beta1[(K*(i-1) + 1):(K * i)])
}
batch_mean <- mean(batch)
MCSE <- sqrt(K * (sum(batch - batch_mean)^2) / M)
MCSE
# 시뮬레이션 데이터 생성
N <- 200
p <- 1000
W <- Mhorseshoe::make_W(N = N, p = p)
standardized_W <- scale(W[,-1], center = TRUE, scale = TRUE)
response_list <- Mhorseshoe::make_response(standardized_W, non_zero = 10,
SD = 1, fixed_coefficients = 5)
z <- response_list[[1]]
non_zero_index <- response_list[[2]]
non_zero_coefficents <- response_list[[3]]
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 20000,
threshold = p,
step_check = TRUE)
tic()
fit_Mamcmc <- Mhorseshoe::modified_approximate_algorithm(standardized_W, z,
iteration = 20000,
threshold = p)
toc()
