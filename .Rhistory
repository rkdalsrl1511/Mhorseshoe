} else if(selected_interval == 2){
z = a/eps - log(1-u+u*exp(-(rcpp_dfex(eps, 1/eps)-rcpp_dfex(eps, a/eps))))/l2;
} else if(selected_interval == 3){
z = 1/eps-log(1-u+u*exp(-(rcpp_dfex(eps, b/eps)-rcpp_dfex(eps, 1/eps))))/l3;
} else{
z = b/eps-log(1-u)/eps;
}
return z;
}
double rcpp_fl(int selected_interval, double eps, double z, double a, double b, double l2, double l3){
double fl;
if(selected_interval == 1){
fl = log(1+z);
} else if(selected_interval == 2){
fl = rcpp_dfex(eps, a/eps) + l2 * (z - a/eps);
} else if(selected_interval == 3){
fl = rcpp_dfex(eps, 1/eps) + l3 * (z - b/eps);
} else{
fl = rcpp_dfex(eps, b/eps) + eps * (z - b/eps);
}
return fl;
}
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector lambda2 = calculate_lambda(epsilon, a, 1);
NumericVector lambda3 = calculate_lambda(epsilon, 1, b);
NumericVector A = rcpp_fex(epsilon, a/epsilon);
NumericVector I = rcpp_fex(epsilon, 1/epsilon);
NumericVector B = rcpp_fex(epsilon, b/epsilon);
NumericMatrix total_prob (p, 4);
total_prob(_, 0) = log(1+a/epsilon);
total_prob(_, 1) = total_prob(_, 0) + (1/lambda2) * exp(-A) * (1 - exp(-(I-A)));
total_prob(_, 2) = total_prob(_, 1) + (1/lambda3) * exp(-I) * (1 - exp(-(B-I)));
total_prob(_, 3) = total_prob(_, 2) + (1/epsilon) * exp(-B);
total_prob(_, 0) = total_prob(_, 0) / total_prob(_, 3);
total_prob(_, 1) = total_prob(_, 1) / total_prob(_, 3);
total_prob(_, 2) = total_prob(_, 2) / total_prob(_, 3);
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
NumericVector u = Rcpp::runif(1, 0, 1);
int selected_interval;
if(u[0] < total_prob(i, 0)){
selected_interval = 1;
} else if(u[0] < total_prob(i, 1)){
selected_interval = 2;
} else if(u[0] < total_prob(i, 2)){
selected_interval = 3;
} else{
selected_interval = 4;
}
NumericVector u_z = Rcpp::runif(1, 0, 1);
double z = sample_z(selected_interval, epsilon[i], lambda2[i], lambda3[i], u_z[0], a, b);
double fl = rcpp_fl(selected_interval, epsilon[i], z, a, b, lambda2[i], lambda3[i]);
double f = rcpp_dfex(epsilon[i], z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
mean(rcpp_rejection_sampler(epsilon, a, b))
microbenchmark(rcpp_rejection_sampler(epsilon, a, b),
rejection_sampler2(epsilon, a, b), times = 10000)
src <- "
#include <Rcpp.h>
using namespace Rcpp;
NumericVector rcpp_fex(NumericVector epsilon, NumericVector x){
NumericVector fex = epsilon * x + log(1+x);
return fex;
}
double rcpp_dfex(double eps, double x){
double dfex = eps * x + log(1 + x);
return dfex;
}
NumericVector calculate_lambda(NumericVector epsilon, double x, double y){
NumericVector lambda = (rcpp_fex(epsilon, y/epsilon) - rcpp_fex(epsilon, x/epsilon)) / (y/epsilon - x/epsilon);
return lambda;
}
double sample_z(int selected_interval, double eps, double l2, double l3, double u, double a, double b){
double z;
if(selected_interval == 1){
z = exp(u * log(1 + a/eps))-1;
} else if(selected_interval == 2){
z = a/eps - log(1-u+u*exp(-(rcpp_dfex(eps, 1/eps)-rcpp_dfex(eps, a/eps))))/l2;
} else if(selected_interval == 3){
z = 1/eps-log(1-u+u*exp(-(rcpp_dfex(eps, b/eps)-rcpp_dfex(eps, 1/eps))))/l3;
} else{
z = b/eps-log(1-u)/eps;
}
return z;
}
double rcpp_fl(int selected_interval, double eps, double z, double a, double b, double l2, double l3){
double fl;
if(selected_interval == 1){
fl = log(1+z);
} else if(selected_interval == 2){
fl = rcpp_dfex(eps, a/eps) + l2 * (z - a/eps);
} else if(selected_interval == 3){
fl = rcpp_dfex(eps, 1/eps) + l3 * (z - b/eps);
} else{
fl = rcpp_dfex(eps, b/eps) + eps * (z - b/eps);
}
return fl;
}
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector A = a + log(1 + a/eps);
NumericVector I = 1 + log(1 + 1/eps);
NumericVector B = b + log(1 + b/eps);
NumericVector lambda2 = (I - A) / (1/eps - a/eps);
NumericVector lambda3 = (B - I) / (b/eps - 1/eps);
NumericMatrix total_prob (p, 4);
total_prob(_, 0) = log(1+a/epsilon);
total_prob(_, 1) = total_prob(_, 0) + (1/lambda2) * exp(-A) * (1 - exp(-(I-A)));
total_prob(_, 2) = total_prob(_, 1) + (1/lambda3) * exp(-I) * (1 - exp(-(B-I)));
total_prob(_, 3) = total_prob(_, 2) + (1/epsilon) * exp(-B);
total_prob(_, 0) = total_prob(_, 0) / total_prob(_, 3);
total_prob(_, 1) = total_prob(_, 1) / total_prob(_, 3);
total_prob(_, 2) = total_prob(_, 2) / total_prob(_, 3);
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
NumericVector u = Rcpp::runif(1, 0, 1);
int selected_interval;
if(u[0] < total_prob(i, 0)){
selected_interval = 1;
} else if(u[0] < total_prob(i, 1)){
selected_interval = 2;
} else if(u[0] < total_prob(i, 2)){
selected_interval = 3;
} else{
selected_interval = 4;
}
NumericVector u_z = Rcpp::runif(1, 0, 1);
double z = sample_z(selected_interval, epsilon[i], lambda2[i], lambda3[i], u_z[0], a, b);
double fl = rcpp_fl(selected_interval, epsilon[i], z, a, b, lambda2[i], lambda3[i]);
double f = rcpp_dfex(epsilon[i], z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
src <- "
#include <Rcpp.h>
using namespace Rcpp;
NumericVector rcpp_fex(NumericVector epsilon, NumericVector x){
NumericVector fex = epsilon * x + log(1+x);
return fex;
}
double rcpp_dfex(double eps, double x){
double dfex = eps * x + log(1 + x);
return dfex;
}
NumericVector calculate_lambda(NumericVector epsilon, double x, double y){
NumericVector lambda = (rcpp_fex(epsilon, y/epsilon) - rcpp_fex(epsilon, x/epsilon)) / (y/epsilon - x/epsilon);
return lambda;
}
double sample_z(int selected_interval, double eps, double l2, double l3, double u, double a, double b){
double z;
if(selected_interval == 1){
z = exp(u * log(1 + a/eps))-1;
} else if(selected_interval == 2){
z = a/eps - log(1-u+u*exp(-(rcpp_dfex(eps, 1/eps)-rcpp_dfex(eps, a/eps))))/l2;
} else if(selected_interval == 3){
z = 1/eps-log(1-u+u*exp(-(rcpp_dfex(eps, b/eps)-rcpp_dfex(eps, 1/eps))))/l3;
} else{
z = b/eps-log(1-u)/eps;
}
return z;
}
double rcpp_fl(int selected_interval, double eps, double z, double a, double b, double l2, double l3){
double fl;
if(selected_interval == 1){
fl = log(1+z);
} else if(selected_interval == 2){
fl = rcpp_dfex(eps, a/eps) + l2 * (z - a/eps);
} else if(selected_interval == 3){
fl = rcpp_dfex(eps, 1/eps) + l3 * (z - b/eps);
} else{
fl = rcpp_dfex(eps, b/eps) + eps * (z - b/eps);
}
return fl;
}
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector A = a + log(1 + a/epsilon);
NumericVector I = 1 + log(1 + 1/epsilon);
NumericVector B = b + log(1 + b/epsilon);
NumericVector lambda2 = (I - A) / (1/epsilon - a/epsilon);
NumericVector lambda3 = (B - I) / (b/epsilon - 1/epsilon);
NumericMatrix total_prob (p, 4);
total_prob(_, 0) = log(1+a/epsilon);
total_prob(_, 1) = total_prob(_, 0) + (1/lambda2) * exp(-A) * (1 - exp(-(I-A)));
total_prob(_, 2) = total_prob(_, 1) + (1/lambda3) * exp(-I) * (1 - exp(-(B-I)));
total_prob(_, 3) = total_prob(_, 2) + (1/epsilon) * exp(-B);
total_prob(_, 0) = total_prob(_, 0) / total_prob(_, 3);
total_prob(_, 1) = total_prob(_, 1) / total_prob(_, 3);
total_prob(_, 2) = total_prob(_, 2) / total_prob(_, 3);
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
NumericVector u = Rcpp::runif(1, 0, 1);
int selected_interval;
if(u[0] < total_prob(i, 0)){
selected_interval = 1;
} else if(u[0] < total_prob(i, 1)){
selected_interval = 2;
} else if(u[0] < total_prob(i, 2)){
selected_interval = 3;
} else{
selected_interval = 4;
}
NumericVector u_z = Rcpp::runif(1, 0, 1);
double z = sample_z(selected_interval, epsilon[i], lambda2[i], lambda3[i], u_z[0], a, b);
double fl = rcpp_fl(selected_interval, epsilon[i], z, a, b, lambda2[i], lambda3[i]);
double f = rcpp_dfex(epsilon[i], z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
mean(rcpp_rejection_sampler(epsilon, a, b))
microbenchmark(rcpp_rejection_sampler(epsilon, a, b),
rejection_sampler2(epsilon, a, b), times = 10000)
src <- "
#include <Rcpp.h>
using namespace Rcpp;
NumericVector rcpp_fex(NumericVector epsilon, NumericVector x){
NumericVector fex = epsilon * x + log(1+x);
return fex;
}
double rcpp_dfex(double eps, double x){
double dfex = eps * x + log(1 + x);
return dfex;
}
NumericVector calculate_lambda(NumericVector epsilon, double x, double y){
NumericVector lambda = (rcpp_fex(epsilon, y/epsilon) - rcpp_fex(epsilon, x/epsilon)) / (y/epsilon - x/epsilon);
return lambda;
}
double sample_z(int selected_interval, double eps, double l2, double l3, double u, double a, double b){
double z;
if(selected_interval == 1){
z = exp(u * log(1 + a/eps))-1;
} else if(selected_interval == 2){
z = a/eps - log(1-u+u*exp(-(rcpp_dfex(eps, 1/eps)-rcpp_dfex(eps, a/eps))))/l2;
} else if(selected_interval == 3){
z = 1/eps-log(1-u+u*exp(-(rcpp_dfex(eps, b/eps)-rcpp_dfex(eps, 1/eps))))/l3;
} else{
z = b/eps-log(1-u)/eps;
}
return z;
}
double rcpp_fl(int selected_interval, double eps, double z, double a, double b, double l2, double l3){
double fl;
if(selected_interval == 1){
fl = log(1+z);
} else if(selected_interval == 2){
fl = rcpp_dfex(eps, a/eps) + l2 * (z - a/eps);
} else if(selected_interval == 3){
fl = rcpp_dfex(eps, 1/eps) + l3 * (z - b/eps);
} else{
fl = rcpp_dfex(eps, b/eps) + eps * (z - b/eps);
}
return fl;
}
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector a_eps = a/epsilon;
NumericVector i_eps = 1/epsilon;
NumericVector b_eps = b/epsilon;
NumericVector A = a + log(1 + a_eps);
NumericVector I = 1 + log(1 + i_eps);
NumericVector B = b + log(1 + b_eps);
NumericVector lambda2 = (I - A) / (i_eps - a_eps);
NumericVector lambda3 = (B - I) / (b_eps - i_eps);
NumericMatrix total_prob (p, 4);
total_prob(_, 0) = log(1+a/epsilon);
total_prob(_, 1) = total_prob(_, 0) + (1/lambda2) * exp(-A) * (1 - exp(-(I-A)));
total_prob(_, 2) = total_prob(_, 1) + (1/lambda3) * exp(-I) * (1 - exp(-(B-I)));
total_prob(_, 3) = total_prob(_, 2) + (1/epsilon) * exp(-B);
total_prob(_, 0) = total_prob(_, 0) / total_prob(_, 3);
total_prob(_, 1) = total_prob(_, 1) / total_prob(_, 3);
total_prob(_, 2) = total_prob(_, 2) / total_prob(_, 3);
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
NumericVector u = Rcpp::runif(1, 0, 1);
int selected_interval;
if(u[0] < total_prob(i, 0)){
selected_interval = 1;
} else if(u[0] < total_prob(i, 1)){
selected_interval = 2;
} else if(u[0] < total_prob(i, 2)){
selected_interval = 3;
} else{
selected_interval = 4;
}
NumericVector u_z = Rcpp::runif(1, 0, 1);
double z = sample_z(selected_interval, epsilon[i], lambda2[i], lambda3[i], u_z[0], a, b);
double fl = rcpp_fl(selected_interval, epsilon[i], z, a, b, lambda2[i], lambda3[i]);
double f = rcpp_dfex(epsilon[i], z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
mean(rcpp_rejection_sampler(epsilon, a, b))
microbenchmark(rcpp_rejection_sampler(epsilon, a, b),
rejection_sampler2(epsilon, a, b), times = 10000)
src <- "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector a_eps = a/epsilon;
NumericVector i_eps = 1/epsilon;
NumericVector b_eps = b/epsilon;
NumericVector A = a + log(1 + a_eps);
NumericVector I = 1 + log(1 + i_eps);
NumericVector B = b + log(1 + b_eps);
NumericVector lambda2 = (I - A) / (i_eps - a_eps);
NumericVector lambda3 = (B - I) / (b_eps - i_eps);
NumericMatrix total_prob (p, 4);
total_prob(_, 0) = log(1+a/epsilon);
total_prob(_, 1) = total_prob(_, 0) + (1/lambda2) * exp(-A) * (1 - exp(-(I-A)));
total_prob(_, 2) = total_prob(_, 1) + (1/lambda3) * exp(-I) * (1 - exp(-(B-I)));
total_prob(_, 3) = total_prob(_, 2) + (1/epsilon) * exp(-B);
total_prob(_, 0) = total_prob(_, 0) / total_prob(_, 3);
total_prob(_, 1) = total_prob(_, 1) / total_prob(_, 3);
total_prob(_, 2) = total_prob(_, 2) / total_prob(_, 3);
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
NumericVector u = Rcpp::runif(1, 0, 1);
NumericVector u_z = Rcpp::runif(1, 0, 1);
if(u[0] < total_prob(i, 0)){
z = exp(u_z[0] * log(1 + a_eps[i]))-1;
fl = log(1 + z);
} else if(u[0] < total_prob(i, 1)){
z = a_eps[i] - log(1 - u_z[0] + u_z[0]*exp(-(I[i]-A[i])))/lambda2[i];
fl = A[i] + lambda2[i] * (z - a_eps[i]);
} else if(u[0] < total_prob(i, 2)){
z = i_eps[i] - log(1 - u_z[0] + u_z[0]*exp(-(B[i]-I[i])))/lambda3[i];
fl = I[i] + lambda3[i] * (z - b_eps[i]);
} else{
z = b_eps[i] - log(1 - u_z[0])/epsilon[i];
fl = B[i] + epsilon[i] * (z - b_eps[i]);
}
double f = epsilon[i] * z + log(1 + z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
src <- "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector rcpp_rejection_sampler(NumericVector epsilon, double a, double b){
int p = epsilon.length();
NumericVector a_eps = a/epsilon;
NumericVector i_eps = 1/epsilon;
NumericVector b_eps = b/epsilon;
NumericVector A = a + log(1 + a_eps);
NumericVector I = 1 + log(1 + i_eps);
NumericVector B = b + log(1 + b_eps);
NumericVector lambda2 = (I - A) / (i_eps - a_eps);
NumericVector lambda3 = (B - I) / (b_eps - i_eps);
NumericMatrix total_prob (p, 4);
total_prob(_, 0) = log(1+a/epsilon);
total_prob(_, 1) = total_prob(_, 0) + (1/lambda2) * exp(-A) * (1 - exp(-(I-A)));
total_prob(_, 2) = total_prob(_, 1) + (1/lambda3) * exp(-I) * (1 - exp(-(B-I)));
total_prob(_, 3) = total_prob(_, 2) + (1/epsilon) * exp(-B);
total_prob(_, 0) = total_prob(_, 0) / total_prob(_, 3);
total_prob(_, 1) = total_prob(_, 1) / total_prob(_, 3);
total_prob(_, 2) = total_prob(_, 2) / total_prob(_, 3);
NumericVector eta(p);
for(int i=0; i<p; ++i){
if(epsilon[i] > 1){
NumericVector v = Rcpp::runif(1, 0, 1);
double z = -log(1 - v[0]) / epsilon[i];
NumericVector u = Rcpp::runif(1, 0, 1);
if(u[0] < (1 / (1 + z))){
eta[i] = z;
} else{
--i;
}
} else {
NumericVector u = Rcpp::runif(1, 0, 1);
NumericVector u_z = Rcpp::runif(1, 0, 1);
double z;
double fl;
if(u[0] < total_prob(i, 0)){
z = exp(u_z[0] * log(1 + a_eps[i]))-1;
fl = log(1 + z);
} else if(u[0] < total_prob(i, 1)){
z = a_eps[i] - log(1 - u_z[0] + u_z[0]*exp(-(I[i]-A[i])))/lambda2[i];
fl = A[i] + lambda2[i] * (z - a_eps[i]);
} else if(u[0] < total_prob(i, 2)){
z = i_eps[i] - log(1 - u_z[0] + u_z[0]*exp(-(B[i]-I[i])))/lambda3[i];
fl = I[i] + lambda3[i] * (z - b_eps[i]);
} else{
z = b_eps[i] - log(1 - u_z[0])/epsilon[i];
fl = B[i] + epsilon[i] * (z - b_eps[i]);
}
double f = epsilon[i] * z + log(1 + z);
u = Rcpp::runif(1, 0, 1);
if(u[0] < exp(-(f - fl))){
eta[i] = z;
} else{
--i;
}
}
}
return eta;
}
"
sourceCpp(code = src)
mean(rcpp_rejection_sampler(epsilon, a, b))
microbenchmark(rcpp_rejection_sampler(epsilon, a, b),
rejection_sampler2(epsilon, a, b), times = 10000)
library(Mhorseshoe)
remove.packages("Mhorseshoe")
library(Mhorseshoe)
remove.packages("Mhorseshoe")
detach(Mhorseshoe)
detach("Mhorseshoe")
